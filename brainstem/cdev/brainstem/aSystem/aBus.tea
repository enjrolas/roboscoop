/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* file: aBus.tea                                                  */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* description: Routines for manipulating I/O on other modules on  */
/*              the BrainStem's I2C bus.                           */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/*        docs: Documentation can be found in the BrainStem        */
/*              Reference under the major topic "TEA"              */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* Copyright 1994-2008. Acroname Inc.                              */
/*                                                                 */
/* This software is the property of Acroname Inc.  Any             */
/* distribution, sale, transmission, or re-use of this code is     */
/* strictly forbidden except with permission from Acroname Inc.    */
/*                                                                 */
/* To the full extent allowed by law, Acroname Inc. also excludes  */
/* for itself and its suppliers any liability, wheither based in   */
/* contract or tort (including negligence), for direct,            */
/* incidental, consequential, indirect, special, or punitive       */
/* damages of any kind, or for loss of revenue or profits, loss of */
/* business, loss of information or data, or other financial loss  */
/* arising out of or in connection with this software, even if     */
/* Acroname Inc. has been advised of the possibility of such       */
/* damages.                                                        */
/*                                                                 */
/* Acroname Inc.                                                   */
/* www.acroname.com                                                */
/* 720-564-0373                                                    */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#include <aCmd.tea>
#include <aCore.tea>

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Sets a servo's absolute position on a remote module.
 */

void aBus_Servo_SetAbsolute(char module,
	                    char servo,
	                    unsigned char position)
{
  /* fabricate the cmdSRV_ABS command for the requested destination 
   * and then use popcmd to send it */
   
  /* on entry, the stack looks like this:
   *  0    5    module
   *  1    4    servo
   *  2    3    position
   *  3    2    retaddrh
   *  4    1    retaddrl
   */

  asm {
    pushsb      5          /* the module */
    pushlb      3          /* the cmdSRV_ABS packet length */
    pushlb      cmdSRV_ABS /* command code */
    pushsb      7          /* the servo index */
    pushsb      7          /* the new position */
    pushlb	5          /* the size of the cmdSRV_ABS command */
    popcmd
  }

} /* aBus_Servo_SetAbsolute */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Reads a char value from a scratchpad location on a remote module.
 */

char aBus_ReadPadChar(char cModule, char cIndex)
{
  char val = 0;
  asm {
    /* set pad pointer in other stem */
    pushsb 	5
    pushlb 	2
    pushlb 	cmdPAD_SETPTR
    pushsb 	7
    pushlb 	4
    popcmd

    /* read byte from device */
    pushsb 	5 	/* IIC address */
    pushlb	1 	/* set read bit */
    orb
    pushlb 	1 	/* bytes to read */
    popsm 	aPortIICRead
    popbs 	1 	/* store as char */
  }
  return val;

} /* aBus_ReadPadChar */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Reads a int value from a scratchpad location on a remote module.
 */

int aBus_ReadPadInt(char cModule, char cIndex)
{
  int val = 0;

  asm {
    /* set pad pointer in other stem */
    pushsb   6
    pushlb   2
    pushlb   cmdPAD_SETPTR /* command code */
    pushsb   8             /* the module */
    pushlb   4             /* the size of the packet */
    popcmd

    /* read byte from device */
    pushsb   6              /* IIC address */
    pushlb   1              /* set read bit */
    orb
    pushlb   2              /* bytes to read */
    popsm    aPortIICRead
    popss    2              /* store as int */
  }
  return val;
} /* aBus_ReadPadInt */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Writes a char value to a scratchpad location on a remote module.
 */

void aBus_WritePadChar(char cModule, char cIndex, char cData)
{
  asm
  {
    pushsb 	5
    pushlb 	3
    pushlb 	cmdPAD_IO
    pushsb 	7
    pushsb	7
    pushlb 	5
    popcmd
  }

} /* aBus_WritePadChar */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Writes a int value to a scratchpad location on a remote module.
 */

void aBus_WritePadInt(char cModule, char cIndex, int nData)
{
  asm
  {
    pushsb 	6
    pushlb 	4
    pushlb 	cmdPAD_IO
    pushsb 	8
    pushss 	8
    pushlb 	6
    popcmd
  }
} /* aBus_WritePadInt */

