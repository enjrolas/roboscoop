/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* file: aI2C.tea                                                  */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* description: General purpose I2C IO routines for devices        */
/*              with single-byte register addresses.               */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/*        docs: Documentation can be found in the BrainStem        */
/*              Reference under the major topic "TEA"              */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* Copyright 1994-2008. Acroname Inc.                              */
/*                                                                 */
/* This software is the property of Acroname Inc.  Any             */
/* distribution, sale, transmission, or re-use of this code is     */
/* strictly forbidden except with permission from Acroname Inc.    */
/*                                                                 */
/* To the full extent allowed by law, Acroname Inc. also excludes  */
/* for itself and its suppliers any liability, wheither based in   */
/* contract or tort (including negligence), for direct,            */
/* incidental, consequential, indirect, special, or punitive       */
/* damages of any kind, or for loss of revenue or profits, loss of */
/* business, loss of information or data, or other financial loss  */
/* arising out of or in connection with this software, even if     */
/* Acroname Inc. has been advised of the possibility of such       */
/* damages.                                                        */
/*                                                                 */
/* Acroname Inc.                                                   */
/* www.acroname.com                                                */
/* 720-564-0373                                                    */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#ifndef _aI2C_T_
#define _aI2C_T_

#include <aIOPorts.tea>

void aI2C_WriteChar(char addr, char reg, char data)
{
  asm
  {
   pushsb	5    /* IIC address       */
   pushlb	2    /* data size         */
   pushsb	6    /* push reg         */
   pushsb	6    /* push data         */
   pushlb	4    /* cmd size          */
   popcmd
  }
}

void aI2C_WriteInt(char addr, char reg, int data)
{
  asm
  {
   pushsb	6    /* IIC address       */
   pushlb	3    /* data size         */
   pushsb	7    /* push reg          */
   pushsb	7    /* push data (high)  */
   pushsb	7    /* push data (low)   */
   pushlb	5    /* cmd size          */
   popcmd
  }
}

void aI2C_Write3(char addr, char reg, char a, char b, char c)
{
  asm
  {
    pushsb	7	/* addr */
    pushlb	4	/* send 4 bytes */
    pushsb	8	/* push reg */
    pushsb	8	/* push a */
    pushsb	8	/* push b */
    pushsb	8	/* push c */
    pushlb	6	/* 6 bytes total in command */
    popcmd
  }
}

void aI2C_Write4(char addr, char reg, char a, char b, char c, char d)
{
  asm
  {
    pushsb	8	/* addr */
    pushlb	5	/* send 5 bytes */
    pushsb	9	/* push reg */
    pushsb	9	/* push a */
    pushsb	9	/* push b */
    pushsb	9	/* push c */
    pushsb	9	/* push d */
    pushlb	7	/* 6 bytes total in command */
    popcmd
  }
}

char aI2C_ReadChar(char addr, char reg)
{
  char val=0;
  asm
  {
   /* write address */
   pushsb	5    /* IIC address       */
   pushlb	1    /* data size         */
   pushsb	6    /* push reg         */
   pushlb	3    /* cmd size          */
   popcmd

   /* read byte from device  */
   pushsb	5    /* IIC address       */
   pushlb	1    /* set read bit      */
   orb
   pushlb	1    /* bytes to read     */
   popsm	aPortIICRead
   popbs	1    /* store as char     */
  }
  return val;
}

int aI2C_ReadInt(char addr, char reg)
{
  int val=0;
  asm
  {
   /* write address */
   pushsb	6    /* IIC address       */
   pushlb	1    /* data size         */
   pushsb	7    /* push reg         */
   pushlb	3    /* cmd size          */
   popcmd

   /* read byte from device  */
   pushsb	6    /* IIC address       */
   pushlb	1    /* set read bit      */
   orb
   pushlb	2    /* bytes to read     */
   popsm	aPortIICRead
   popss	2    /* store as int     */
  }
  return val;
}

#endif /* _aI2C_T_ */
