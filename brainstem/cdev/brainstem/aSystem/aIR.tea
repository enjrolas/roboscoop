/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* file: aIR.tea                                                   */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* description: Routines for IR IO functions                       */
/*              for BrainStem GP 2.0 Modules.                      */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/*        docs: Documentation can be found in the BrainStem        */
/*              Reference under the major topic "TEA"              */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* Copyright 1994-2008. Acroname Inc.                              */
/*                                                                 */
/* This software is the property of Acroname Inc.  Any             */
/* distribution, sale, transmission, or re-use of this code is     */
/* strictly forbidden except with permission from Acroname Inc.    */
/*                                                                 */
/* To the full extent allowed by law, Acroname Inc. also excludes  */
/* for itself and its suppliers any liability, wheither based in   */
/* contract or tort (including negligence), for direct,            */
/* incidental, consequential, indirect, special, or punitive       */
/* damages of any kind, or for loss of revenue or profits, loss of */
/* business, loss of information or data, or other financial loss  */
/* arising out of or in connection with this software, even if     */
/* Acroname Inc. has been advised of the possibility of such       */
/* damages.                                                        */
/*                                                                 */
/* Acroname Inc.                                                   */
/* www.acroname.com                                                */
/* 720-564-0373                                                    */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#ifndef _aIR_T_
#define _aIR_T_

#include <aIOPorts.tea>
#include <aCmd.tea>

#define aIR_PROTOCOL_NEC 0
#define aIR_PROTOCOL_RC5 1

#define aIR_REPLY_HOST (char)maskDEV_VAL_HOST
#define aIR_REPLY_TEA (char)maskDEV_VAL_TEA
#define aIR_REPLY_REFLEX (char)maskDEV_VAL_REFLEX

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * aIR_ConfigRX
 *
 * Configure the GP 2.0 for IR receive
 * User need to define which IR protocol they want to use
 * This command sets the IR protocol based on function input
 * then configures the ptimer for DIO pin 4.
 *
 */

void aIR_ConfigRX(char protocol, char reply)
{
  asm {
    pushlb 2 /* Module address */
    pushlb 3 /* Packet length */
    pushlb cmdIRP_CFG /* TEAvm command code for IR config */
    pushlb 4 /* DigID value, RX pin is tied to digital 4 */
    pushsb 7 /* Grab the protocol */
    pushsb 9 /* Grab the reply mask */
    orb /* Put the protocol and reply together */
    pushlb 8 /* Enable IR bit */
    orb /* protocol | reply | 8 */
    pushlb 5 /* Size of the command packet */
    popcmd
	
    /* Set up ptimer on pin 4 */
    pushmb aPortAddress
    pushlb 2             /* Number of bytes in command */
    pushlb 29            /* cmdPTIME_RD */
    pushlb 4             /* PTIME_ID4 */
    pushsb 7             /* Grab the reply mask */
    orb                  /* Combine reply mask and Ptimer */
    pushlb 4             /* next four bytes are the packet */
    popcmd               /* [aPortAddress 2 cmdPTIME_RD DEVCODE] */ 
  }
} /* end of aIR_ConfigRX function */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * aIR_ConfigTX
 *
 * Configure the GP 2.0 for IR receive
 * User need to define which IR protocol they want to use
 *
 */

void aIR_ConfigTX(char protocol)
{
  asm {
    pushlb 2 /* Module address */
    pushlb 3 /* Packet length */
    pushlb cmdIRP_CFG /* TEAvm command code for IR config */
    pushlb 5 /* DigID value, TX pin is tied to digital 5 */
    pushsb 7 /* Grab the protocol */
    pushsb 9 /* Grab the reply mask */
    orb /* Put the protocol and reply together */
    pushlb 8 /* Enable IR bit */
    orb /* protocol | reply | 8 */
    pushlb 5 /* Size of the command packet */
    popcmd
  }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * aIR_RXInt
 *
 * GP 2.0 for IR receive for an int value
 * Value is passed into an int return value
 *
 */
int aIR_RXInt()
{
  int val=0;
  asm {
    pushls aPortIRRX
    pushmsx
    popss	2
  }
  return val;
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * aIR_TXInt
 *
 * GP 2.0 for IR transmit of an int value
 * Value is sent into the function is sent out the IR tranmitter 
 *
 */
void aIR_TXInt(int value)
{
  asm {
    pushss	4
    pushls	aPortIRTX
    popsmx
  }
}


#endif /* _aIR_T_ */
