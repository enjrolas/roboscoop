/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* file: aIRCM.tea                                                 */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* description: Routines for use with Total Robots                 */
/*              IRCM module with I2C interface.                    */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/*        docs: Documentation can be found in the BrainStem        */
/*              Reference under the major topic "TEA"              */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* Copyright 1994-2008. Acroname Inc.                              */
/*                                                                 */
/* This software is the property of Acroname Inc.  Any             */
/* distribution, sale, transmission, or re-use of this code is     */
/* strictly forbidden except with permission from Acroname Inc.    */
/*                                                                 */
/* To the full extent allowed by law, Acroname Inc. also excludes  */
/* for itself and its suppliers any liability, wheither based in   */
/* contract or tort (including negligence), for direct,            */
/* incidental, consequential, indirect, special, or punitive       */
/* damages of any kind, or for loss of revenue or profits, loss of */
/* business, loss of information or data, or other financial loss  */
/* arising out of or in connection with this software, even if     */
/* Acroname Inc. has been advised of the possibility of such       */
/* damages.                                                        */
/*                                                                 */
/* Acroname Inc.                                                   */
/* www.acroname.com                                                */
/* 720-564-0373                                                    */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#ifndef _aIRCM_T_
#define _aIRCM_T_

#include <aI2C.tea>

#define	AIRCM_IRP_RC5   1
#define	AIRCM_IRP_SONY  2
#define	AIRCM_IRP_SKY   3
#define	AIRCM_IRP_NEC   4

#define aIRCM_SetLocalAddr(addr, data)	aI2C_WriteChar(addr, 0, data)
#define aIRCM_SetDestAddr(addr, data)	aI2C_WriteChar(addr, 1, data)
#define aIRCM_SetTimeout(addr, data)	aI2C_WriteChar(addr, 2, data)
#define aIRCM_SetRWData(addr, data)	aI2C_WriteChar(addr, 3, data)
#define aIRCM_SetExtData(addr, x, data)	aI2C_WriteChar(addr, 6 + x, data)

#define aIRCM_GetRWStatus(addr)		aI2C_ReadChar(addr, 0)
#define aIRCM_GetRWError(addr)		aI2C_ReadChar(addr, 1)
#define aIRCM_GetRRStatus(addr)		aI2C_ReadChar(addr, 2)
#define aIRCM_GetRRError(addr)		aI2C_ReadChar(addr, 3)
#define aIRCM_GetRRNode(addr)		aI2C_ReadChar(addr, 4)
#define aIRCM_GetRRData(addr)		aI2C_ReadChar(addr, 5)
#define aIRCM_GetRRWord(addr)		aI2C_ReadInt(addr, 4)
#define aIRCM_GetRemoteStatus(addr)	aI2C_ReadChar(addr, 11)
#define aIRCM_GetIRCMStatus(addr)	aI2C_ReadChar(addr, 18)
#define aIRCM_GetExtDataFlags(addr)	aI2C_ReadChar(addr, 19)
#define aIRCM_GetExtData(addr, x)	aI2C_ReadChar(addr, 19 + x)
#define aIRCM_GetRCStatus(addr)		aI2C_ReadChar(addr, 28)
#define aIRCM_GetRCType(addr)		aI2C_ReadChar(addr, 29)
#define	aIRCM_GetRCWord1(addr)		aI2C_ReadInt(addr, 30)
#define	aIRCM_GetRCWord2(addr)		aI2C_ReadInt(addr, 32)

char aIRCM_Transmit(char addr, char dest, char timeout, char data)
{
  char c = 0;

  /* write 3 bytes starting at remote node address register */
  aI2C_Write3(addr, 1, dest, timeout, data);
  
  /* check for write completion */
  while (1)
  {  
     /* 0xFF (-1) indicates completion */
    c = aI2C_ReadChar(addr, 0);
    if (c == -1) break;
    aCore_Sleep(100);
  }
  
  /* return remote write status */
  c = aI2C_ReadChar(addr, 1);
  
  return c;
}

#endif /* _aIRCM_T_ */
