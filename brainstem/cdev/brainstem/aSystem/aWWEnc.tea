/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* file: aWWEnc.tea                                                */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* description: Wheel Watcher odometry process.                    */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/*        docs: Documentation can be found in the BrainStem        */
/*              Reference under the major topic "TEA"              */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* Copyright 1994-2008. Acroname Inc.                              */
/*                                                                 */
/* This software is the property of Acroname Inc.  Any             */
/* distribution, sale, transmission, or re-use of this code is     */
/* strictly forbidden except with permission from Acroname Inc.    */
/*                                                                 */
/* To the full extent allowed by law, Acroname Inc. also excludes  */
/* for itself and its suppliers any liability, wheither based in   */
/* contract or tort (including negligence), for direct,            */
/* incidental, consequential, indirect, special, or punitive       */
/* damages of any kind, or for loss of revenue or profits, loss of */
/* business, loss of information or data, or other financial loss  */
/* arising out of or in connection with this software, even if     */
/* Acroname Inc. has been advised of the possibility of such       */
/* damages.                                                        */
/*                                                                 */
/* Acroname Inc.                                                   */
/* www.acroname.com                                                */
/* 720-564-0373                                                    */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

// Copy and paste this file into your aUser directory
// if you are using the Wheel Watcher.  Configure your
// servos according to the defines in aWWDefs.tea or
// make appropriate modifications.  Spawn this program
// as a new process from your main program.  Signal this
// program with the desired encoder mode to start
// encoder processing.

#include <aCore.tea>
#include <aMulti.tea>
#include <aWWDefs.tea>

/* quad count lookup table */
char b0000 = 0;
char b0001 = -1;
char b0010 = 1;
char b0011 = 0;
char b0100 = 1;
char b0101 = 0;
char b0110 = 0;
char b0111 = -1;
char b1000 = -1;
char b1001 = 0;
char b1010 = 0;
char b1011 = 1;
char b1100 = 0;
char b1101 = 1;
char b1110 = -1;
char b1111 = 0;

void aWW_CheckAandB()
{
  char apreR = 0;
  char apreL = 0;

  while (1) {

    /* check left encoder */
    asm {

      pushmb	aPortDigital
		+ AWWDEFS_LMO_CHA * aPortDigitalBlockSize
		+ aOffsetDigitalIO
      pushsb	1
      pushsb	3
      compb
      andb
      popb
      brz	q_loop_done_L

      pushmb	aPortDigital
		+ AWWDEFS_LMO_CHB * aPortDigitalBlockSize
		+ aOffsetDigitalIO
      popb
      brz	q_loop_inc_L
q_loop_dec_L:
      pushms	aPortScratch + AWWDEFS_LMO_ENC
      decs	2
      popsm	aPortScratch + AWWDEFS_LMO_ENC
      goto	q_loop_done_L
q_loop_inc_L:
      pushms	aPortScratch + AWWDEFS_LMO_ENC
      incs	2
      popsm	aPortScratch + AWWDEFS_LMO_ENC

q_loop_done_L:
      popbs	1      
    }

    /* check right encoder */
    asm {

      pushmb	aPortDigital
		+ AWWDEFS_RMO_CHA * aPortDigitalBlockSize
		+ aOffsetDigitalIO
      pushsb	1
      pushsb	4
      compb
      andb
      popb
      brz	q_loop_done_R

      pushmb	aPortDigital
		+ AWWDEFS_RMO_CHB * aPortDigitalBlockSize
		+ aOffsetDigitalIO
      popb
      brz	q_loop_inc_R
q_loop_dec_R:
      pushms	aPortScratch + AWWDEFS_RMO_ENC
      decs	2
      popsm	aPortScratch + AWWDEFS_RMO_ENC
      goto	q_loop_done_R
q_loop_inc_R:
      pushms	aPortScratch + AWWDEFS_RMO_ENC
      incs	2
      popsm	aPortScratch + AWWDEFS_RMO_ENC

q_loop_done_R:
      popbs	2
    }
  }
}

void aWW_CheckBandDIR()
{
  char apreR = 0;
  char apreL = 0;

  while (1) {

    /* check left encoder */
    asm {

      pushmb	aPortDigital
		+ AWWDEFS_LMO_CHB * aPortDigitalBlockSize
		+ aOffsetDigitalIO
      pushsb	1
      pushsb	3
      xorb
      popb
      brz	q_loop_done_L

      pushmb	aPortDigital
		+ AWWDEFS_LMO_DIR * aPortDigitalBlockSize
		+ aOffsetDigitalIO
      popb
      brz	q_loop_inc_L
q_loop_dec_L:
      pushms	aPortScratch + AWWDEFS_LMO_ENC
      decs	2
      popsm	aPortScratch + AWWDEFS_LMO_ENC
      goto	q_loop_done_L
q_loop_inc_L:
      pushms	aPortScratch + AWWDEFS_LMO_ENC
      incs	2
      popsm	aPortScratch + AWWDEFS_LMO_ENC

q_loop_done_L:
      popbs	1      
    }

    /* check right encoder */
    asm {

      pushmb	aPortDigital
		+ AWWDEFS_RMO_CHB * aPortDigitalBlockSize
		+ aOffsetDigitalIO
      pushsb	1
      pushsb	4
      xorb
      popb
      brz	q_loop_done_R

      pushmb	aPortDigital
		+ AWWDEFS_RMO_DIR * aPortDigitalBlockSize
		+ aOffsetDigitalIO
      popb
      brz	q_loop_inc_R
q_loop_dec_R:
      pushms	aPortScratch + AWWDEFS_RMO_ENC
      decs	2
      popsm	aPortScratch + AWWDEFS_RMO_ENC
      goto	q_loop_done_R
q_loop_inc_R:
      pushms	aPortScratch + AWWDEFS_RMO_ENC
      incs	2
      popsm	aPortScratch + AWWDEFS_RMO_ENC

q_loop_done_R:
      popbs	2
    }
  }
}

void aWW_QuadCtAandB()
{
  char preR = 0;
  char preL = 0;
  char tempR = 0;
  char tempL = 0;

  while (1) {

    /* check left encoder */
    asm {

      pushmb	aPortDigital
		+ AWWDEFS_LMO_CHA * aPortDigitalBlockSize
		+ aOffsetDigitalIO
      pushmb	aPortDigital
		+ AWWDEFS_LMO_CHB * aPortDigitalBlockSize
		+ aOffsetDigitalIO
      pushlb	1
      rlb
      orb		/* s = ((B << 1) | A), offset = 1 */
      pushsb	1
      popbs	2	/* tempL = s */
      pushlb	2
      rlb		/* s <<= 2 */
      pushsb	4
      orb		/* s |= preL */
      convbs
      incs	2	/* offset to start of array */
      pushsbax
      convbs
      pushms	aPortScratch + AWWDEFS_LMO_ENC
      adds
      popsm	aPortScratch + AWWDEFS_LMO_ENC
      pushsb	1
      popbs	3	/* preL = s */
    }

    /* check right encoder */
    asm {

      pushmb	aPortDigital
		+ AWWDEFS_RMO_CHA * aPortDigitalBlockSize
		+ aOffsetDigitalIO
      pushmb	aPortDigital
		+ AWWDEFS_RMO_CHB * aPortDigitalBlockSize
		+ aOffsetDigitalIO
      pushlb	1
      rlb
      orb		/* s = ((B << 1) | A), offset = 1 */
      pushsb	1
      popbs	3	/* tempR = s */
      pushlb	2
      rlb		/* s <<= 2 */
      pushsb	5
      orb		/* s |= preR */
      convbs
      incs	2	/* offset to start of array */
      pushsbax
      convbs
      pushms	aPortScratch + AWWDEFS_RMO_ENC
      adds
      popsm	aPortScratch + AWWDEFS_RMO_ENC
      pushsb	2
      popbs	4	/* preR = s */
    }
  }
}

void main(char callingProc)
{
  int option;
  option = aMulti_Wait();
  switch (option) {
    case AWWDEFS_A_AND_B:
      /* 32 counts per revolution, low overhead */
      aWW_CheckAandB();
      break;
    case AWWDEFS_B_AND_DIR:
      /* 64 counts per revolution, medium speed */
      aWW_CheckBandDIR();
      break;
    case AWWDEFS_QUADCT_AB:
      /* 128 counts per revolution, slowest routine */
      aWW_QuadCtAandB();
      break;
  }
}
