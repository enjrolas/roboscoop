/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* file: aGPM.tea                                                  */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* description: Routines for use with Total Robots                 */
/*              GPM module with I2C interface.                     */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/*        docs: Documentation can be found in the BrainStem        */
/*              Reference under the major topic "TEA"              */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* Copyright 1994-2008. Acroname Inc.                              */
/*                                                                 */
/* This software is the property of Acroname Inc.  Any             */
/* distribution, sale, transmission, or re-use of this code is     */
/* strictly forbidden except with permission from Acroname Inc.    */
/*                                                                 */
/* To the full extent allowed by law, Acroname Inc. also excludes  */
/* for itself and its suppliers any liability, wheither based in   */
/* contract or tort (including negligence), for direct,            */
/* incidental, consequential, indirect, special, or punitive       */
/* damages of any kind, or for loss of revenue or profits, loss of */
/* business, loss of information or data, or other financial loss  */
/* arising out of or in connection with this software, even if     */
/* Acroname Inc. has been advised of the possibility of such       */
/* damages.                                                        */
/*                                                                 */
/* Acroname Inc.                                                   */
/* www.acroname.com                                                */
/* 720-564-0373                                                    */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#ifndef _aGPM_T_
#define _aGPM_T_

#include <aI2C.tea>

/*******************************************/
/* NOTE:  TEA GPM library converts all     */
/*        fractional values to thousandths */
/*******************************************/

int aGPM_Get2DigitInt(char addr, char reg)
{
  int value;
  char A=0;
  char B=0;
  value = aI2C_ReadInt(addr, reg);
  asm
  {
    pushss	4
    popss	2
  }
  
  /* no overflow possible since 99 is still a char */
  value = (int)(A*10 + B);
  return value;
}

int aGPM_Get3DigitInt(char addr, char reg)
{
  int value=0;
  char A=0;
  char B=0;
  char C=0;
  asm
  {
   /* write address */
   pushsb	9	/* IIC address */
   pushlb	1	/* data size */
   pushsb	10	/* push start */
   pushlb	3	/* cmd size */
   popcmd

   /* read 3 bytes from device  */
   pushsb	9	/* IIC address */
   pushlb	1	/* set read bit */
   orb
   pushlb	3    /* read three bytes */
   popsm	aPortIICRead

   /* stuff bytes into A,B,C */
   popbs	3
   popbs	3
   popbs	3
  }
  
  /* typecasts avoid overflow */
  value = ((int)A)*100 + ((int)B)*10 + (int)C;
  return value;
}

int aGPM_GetYear(char addr)
{
  int year;
  year =   aGPM_Get2DigitInt(addr, 10) * 100
         + aGPM_Get2DigitInt(addr, 12);
  return year;
}

int aGPM_GetAltitude(char addr)
{
  int altm;
  altm =   aGPM_Get2DigitInt(addr, 37) * 1000
         + aGPM_Get3DigitInt(addr, 40);
  return altm;
}

int aGPM_GetAnalogInput(char addr, char n)
{
  int value = 0;
  char c;
  c = aI2C_ReadChar(addr, 88 + n);
  asm
  {
    pushsb 1
    popbs 2
  }
  return value;
}

#define	aGPM_GetHours(addr)		aGPM_Get2DigitInt(addr, 0)
#define	aGPM_GetMinutes(addr)		aGPM_Get2DigitInt(addr, 2)
#define	aGPM_GetSeconds(addr)		aGPM_Get2DigitInt(addr, 4)
#define	aGPM_GetDay(addr)		aGPM_Get2DigitInt(addr, 6)
#define	aGPM_GetMonth(addr)		aGPM_Get2DigitInt(addr, 8)

#define	aGPM_GetLatitudeDegrees(addr)	aGPM_Get2DigitInt(addr, 14)
#define	aGPM_GetLatitudeMinutes(addr)	aGPM_Get2DigitInt(addr, 16)
#define	aGPM_GetLatitudeFrac(addr)	aGPM_Get3DigitInt(addr, 18)
#define	aGPM_GetLatitudeDirChar(addr)	aI2C_ReadChar(addr, 21)

#define	aGPM_GetLongitudeDegrees(addr)	aGPM_Get3DigitInt(addr, 22)
#define	aGPM_GetLongitudeMinutes(addr)	aGPM_Get2DigitInt(addr, 25)
#define	aGPM_GetLongitudeFrac(addr)	aGPM_Get3DigitInt(addr, 27)
#define	aGPM_GetLongitudeDirChar(addr)	aI2C_ReadChar(addr, 30)

#define	aGPM_GetGPSQuality(addr)	aI2C_ReadChar(addr, 31)
#define	aGPM_GetSatellitesInUse(addr)	aGPM_Get2DigitInt(addr, 32)
#define	aGPM_GetHDOP(addr)		aGPM_Get3DigitInt(addr, 34)

#define	aGPM_GetTrueHeading(addr)	aGPM_Get3DigitInt(addr, 42)
#define	aGPM_GetTrueHeadingFrac(addr)	(aI2C_ReadChar(addr, 45) * 1000)
#define	aGPM_GetMagHeading(addr)	aGPM_Get3DigitInt(addr, 46)
#define	aGPM_GetMagHeadingFrac(addr)	(aI2C_ReadChar(addr, 49) * 1000)

#define	aGPM_GetSpeed(addr)		aGPM_Get3DigitInt(addr, 50)
#define	aGPM_GetSpeedFrac(addr)		(aI2C_ReadChar(addr, 53) * 1000)

#define aGPM_GetSatelliteID(addr, n)		aGPM_Get2DigitInt(addr, 57 + (n - 1) * 4);
#define aGPM_GetSatelliteSignalLevel(addr, n)	aGPM_Get2DigitInt(addr, 59 + (n - 1) * 4);

#define aGPM_GetDigitalIO(addr)		(aI2C_ReadChar(addr, 93) & 0x0F)

#define aGPM_GetPosFoundFlag(addr)	(aI2C_ReadChar(addr, 94) & 16)
#define aGPM_GetStatus(addr)		aI2C_ReadChar(addr, 94)

#define	aGPM_SetPortDir(addr, dir)	aI2C_WriteChar(addr, 0, dir)
#define	aGPM_SetPortBits(addr, bits)	aI2C_WriteChar(addr, 1, bits)

#endif /* _aGPM_T_ */
