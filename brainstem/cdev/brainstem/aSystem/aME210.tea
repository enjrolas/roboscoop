/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* file: aME210.tea                                               */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* description: Routines for interfacing to the Nubotics      	   */
/*              ME-210 Wheel encoder                               */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/*        docs: Documentation can be found in the BrainStem        */
/*              Reference under the major topic "TEA"              */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* Copyright 1994-2008. Acroname Inc.                              */
/*                                                                 */
/* This software is the property of Acroname Inc.  Any             */
/* distribution, sale, transmission, or re-use of this code is     */
/* strictly forbidden except with permission from Acroname Inc.    */
/*                                                                 */
/* To the full extent allowed by law, Acroname Inc. also excludes  */
/* for itself and its suppliers any liability, wheither based in   */
/* contract or tort (including negligence), for direct,            */
/* incidental, consequential, indirect, special, or punitive       */
/* damages of any kind, or for loss of revenue or profits, loss of */
/* business, loss of information or data, or other financial loss  */
/* arising out of or in connection with this software, even if     */
/* Acroname Inc. has been advised of the possibility of such       */
/* damages.                                                        */
/*                                                                 */
/* Acroname Inc.                                                   */
/* www.acroname.com                                                */
/* 720-564-0373                                                    */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#ifndef _aME210_T_
#define _aME210_T_

#include <aIOPorts.tea>

#define _aME210_I2C_Address 0x30
#define _aME210_Angle 0x57 /* ASCII letter "W" */
#define _aME210_Distance 0x44 /* ASCII letter "D" */
#define _aME210_Reset 0x52 /* ASCII letter "R" */

/* ********************************************************
    Function name: aME210_GetAngle()
    Description: Returns the current angle, in encoder ticks. 

    Pseudocode:
      Step 1.) Read the current I2C baudrate and store it.
      Step 2.) Configure the I2C baudrate to 400kbps
      Step 3.) Set the register pointer to desired location
      Step 4.) Build the I2C packet.
      Step 5.) Execute the I2C packet.
      Step 6.) Restore origional I2C setting.
      Step 7.) Return the value.
 */
int aME210_GetAngle()
{
  int val = 0;
  asm
  {
   /* store the current IIC speed to restore later */
   pushmb aPortIICBaud
   
   /* set to 400kHz for the WheelCommander */
   pushlb 1 /* Set to 400kHz */
   popbm  aPortIICBaud /* Change I2C baud */

   /* Set the I2C register pointer to appropriate location */
   pushlb _aME210_I2C_Address    /* IIC address */
   pushlb 1                     /* data size */
   pushlb _aME210_Angle          /* push reg */
   pushlb 3                     /* cmd size */
   popcmd                       /* execute */

   /* read the value from the device */
   pushlb _aME210_I2C_Address    /* IIC address */
   pushlb 1                     /* Add one for read */
   addb
   pushlb 3                     /* bytes to read */
   popsm  aPortIICRead

   /* store into val */
   popbs 5
   popbs 3
   popn 1                       /* Get rid of register addr */

   /* restore entry IIC speed */
   popbm  aPortIICBaud

  } /* End of assembly */
  return val;
} /* End of aME210_GetAngle() function */

/* ********************************************************
    Function name: aME210_GetDistance_Low()
    Description: Returns the current measured distance 
      low 2 bytes.

    Pseudocode:
      Step 1.) Read the current I2C baudrate and store it.
      Step 2.) Configure the I2C baudrate to 400kbps
      Step 3.) Set the register pointer to desired location
      Step 4.) Build the I2C packet.
      Step 5.) Execute the I2C packet.
      Step 6.) Restore origional I2C setting.
      Step 7.) Return the value.
 */

int aME210_GetDistance_Low()
{
  int val = 0;
  asm
  {
   /* store the current IIC speed to restore later */
   pushmb aPortIICBaud
   
   /* set to 400kHz for the WheelCommander */
   pushlb 1 /* Set to 400kHz */
   popbm  aPortIICBaud /* Change I2C baud */

   /* Set the I2C register pointer to appropriate location */
   pushlb _aME210_I2C_Address    /* IIC address */
   pushlb 1                     /* data size */
   pushlb _aME210_Distance       /* push reg */
   pushlb 3                     /* cmd size */
   popcmd                       /* execute */

   /* read the value from the device */
   pushlb _aME210_I2C_Address    /* IIC address */
   pushlb 1                     /* Add one for read */
   addb
   pushlb 5                     /* bytes to read */
   popsm  aPortIICRead

   /* store into val */
   popn 2 /* Loose top 2 bytes */
   popbs 5
   popbs 3
   popn 1

   /* restore entry IIC speed */
   popbm  aPortIICBaud

  } /* End of assembly */

  return val;

}

/* ********************************************************
    Function name: aME210_GetDistance_High()
    Description: This command returns the two high bit values 
      of the 32 bit word that represents the current 
      measured position. 

    Pseudocode:
      Step 1.) Read the current I2C baudrate and store it.
      Step 2.) Configure the I2C baudrate to 400kbps
      Step 3.) Set the register pointer to desired location
      Step 4.) Build the I2C packet.
      Step 5.) Execute the I2C packet.
      Step 6.) Restore origional I2C setting.
      Step 7.) Return the value.
 */

int aME210_GetDistance_High()
{
  int val = 0;
  asm
  {
   /* store the current IIC speed to restore later */
   pushmb aPortIICBaud
   
   /* set to 400kHz for the Unicoder */
   pushlb 1
   popbm  aPortIICBaud /* Change I2C baud */

   /* Set the I2C register pointer to appropriate location */
   pushlb _aME210_I2C_Address   /* IIC address */
   pushlb 1                     /* data size */
   pushlb _aME210_Distance      /* push reg */
   pushlb 3                     /* cmd size */
   popcmd                       /* execute */

   /* read the value from the device */
   pushlb _aME210_I2C_Address    /* IIC address */
   pushlb 1                     /* Add one for read */
   addb
   pushlb 5                     /* bytes to read */
   popsm  aPortIICRead

   /* store into val */
   popbs 7
   popbs 5
   popn 3 /* Loose top 2 bytes */

   /* restore entry IIC speed */
   popbm  aPortIICBaud

  } /* End of assembly */

  return val;

} /* End of aME210_GetDistance_High() function */

/* ********************************************************
    Function name: aME210_Reset()
    Description: Resets the Unicoder software. 
    Pseudocode:
      Step 1.) Read the current I2C baudrate and store it.
      Step 2.) Configure the I2C baudrate to 400kbps
      Step 3.) Build the I2C packet.
      Step 4.) Execute the I2C packet.
      Step 5.) Restore origional I2C setting.
*/
void aME210_Reset()
{
  asm
  {
   /* store the current IIC speed to restore later */
   pushmb aPortIICBaud
   
   /* set to 400kHz for the Unicoder */
   pushlb 1
   popbm  aPortIICBaud /* Change I2C baud */

   pushlb _aME210_I2C_Address   /* IIC address */
   pushlb 1                     /* data size */
   pushlb _aME210_Reset         /* push reg */
   pushlb 3                     /* cmd size */
   popcmd                       /* execute */

   /* restore entry IIC speed */
   popbm  aPortIICBaud

  } /* End of assembly */
} /* End of aME210_Reset() function */






#endif /* _aME210_T_ */
