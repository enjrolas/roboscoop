/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* file: aMo.tea                                                   */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* description: Routines to drive servos modified for continuous   */
/*              rotation.                                          */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/*        docs: Documentation can be found in the BrainStem        */
/*              Reference under the major topic "TEA"              */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* Copyright 1994-2008. Acroname Inc.                              */
/*                                                                 */
/* This software is the property of Acroname Inc.  Any             */
/* distribution, sale, transmission, or re-use of this code is     */
/* strictly forbidden except with permission from Acroname Inc.    */
/*                                                                 */
/* To the full extent allowed by law, Acroname Inc. also excludes  */
/* for itself and its suppliers any liability, wheither based in   */
/* contract or tort (including negligence), for direct,            */
/* incidental, consequential, indirect, special, or punitive       */
/* damages of any kind, or for loss of revenue or profits, loss of */
/* business, loss of information or data, or other financial loss  */
/* arising out of or in connection with this software, even if     */
/* Acroname Inc. has been advised of the possibility of such       */
/* damages.                                                        */
/*                                                                 */
/* Acroname Inc.                                                   */
/* www.acroname.com                                                */
/* 720-564-0373                                                    */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#ifndef _aMo_T_
#define _aMo_T_

/* included for ports and sleep function */
#include <aCore.tea>


/* handle backwards compatibility */
#ifndef aMo_Go
#define aMo_Go		aMo_GoOld
#endif


#define	AMO_RWHUG	1
#define	AMO_LWHUG	-1

#define AMO_OFFSET	60
#define	AMO_MAXSPD	60
#define	AMO_MINSPD	-60



/*
 * Source program MUST include aMo_Def.tea or a renamed copy
 * of that file before including aMo.tea.  The aMo.tea file uses
 * the data in that file for motor control calculations and for
 * configuring the modified servos.
 */
 

/* SERVO INITIALIZATION */
void aMo_Init()
{
  asm
  {
    pushlb	2	/* servo limit port bug workaround */
    pushlb	4	/* (for firmware before build 4) */
    pushlb	32
    pushlb	AMO_SRVL
    pushlb	AMO_POS0L
    pushlb	AMO_POSRESL
    pushlb	6
    popcmd

    pushlb	2	/* servo limit port bug workaround */
    pushlb	4	/* (for firmware before build 4) */
    pushlb	32
    pushlb	AMO_SRVR
    pushlb	AMO_POS0R
    pushlb	AMO_POSRESR
    pushlb	6
    popcmd

    pushlb	(unsigned char)AMO_CFGL
    popbm	aPortServo 
    		+ AMO_SRVL
    		* aPortServoBlockSize
    		+ aOffsetServoConfig
    pushlb	(unsigned char)AMO_CFGR
    popbm	aPortServo+AMO_SRVR
                * aPortServoBlockSize
                + aOffsetServoConfig
    pushlb	AMO_OFFSET
    popbm	aPortServo
                + AMO_SRVL
                * aPortServoBlockSize
                + aOffsetServoAbsolute
    pushlb	AMO_OFFSET
    popbm	aPortServo
                + AMO_SRVR
                * aPortServoBlockSize
                + aOffsetServoAbsolute
  }
}



/* This function sets the speed of a servo.
 * It also switches the enable bit based
 * on the speed input value.
 * -128 to 127 is mapped to absolute position 0 to 255.
 * Not for general use.
 */
void _private_aMo_GoOne(char v, int pcfg)
{
  asm
  {
    pushss 4 // push pcfg
    pushmbx // pops pcfg, pushes config byte
    pushsb 6 // push v to set flags
    popb // pop v

    brz v_zero
v_nonz:
    pushlb (char)0x80 // v non-zero so enable servo
    orb
    goto v_done
v_zero:
    pushlb 0x7F // v zero so disable servo
    andb
v_done:
    pushss 5 // push pcfg
    popbmx // pops pcfg, writes new config byte

    pushsb 5 // push v
    pushlb (char)128 // v+128 (center offset)
    addb

    pushss 5 // push pcfg
    pushls 2 // point to absolute position port
    adds
    popbmx // write velocity
  }
}



/*********************************************************

MOTOR CONTROL

spdl = speed for left servo
spdr = speed for right servo

Uses the old dual-servo tuning technique:
-60 is full reverse, 0 is stop, 60 is full forward
(Servo is tuned to range 0-120 with centering offset of 60)

*/
void aMo_GoOld(char spdl, char spdr)
{
  asm {
    pushsb      4
    pushlb	AMO_OFFSET
    addb
    popbm       aPortServo 
                  + (AMO_SRVL * aPortServoBlockSize) 
                  + aOffsetServoAbsolute
    pushsb      3
    pushlb	AMO_OFFSET
    addb
    popbm       aPortServo 
                  + (AMO_SRVR * aPortServoBlockSize) 
                  + aOffsetServoAbsolute
  }
  return;
}



/*********************************************************

MOTOR CONTROL

spdl = speed for left servo
spdr = speed for right servo

If the speed of a servo == 0, it is disabled.
If the speed of a servo != 0, it is enabled.

New tuning style.  Servo just needs to be centered.
This can be done via exposed pot or adjustment to offset via GP.
 
*/
void aMo_GoNew(char spdl, char spdr)
{
  _private_aMo_GoOne(spdl, aPortServo + aPortServoBlockSize*AMO_SRVL + aOffsetServoConfig);
  _private_aMo_GoOne(spdr, aPortServo + aPortServoBlockSize*AMO_SRVR + aOffsetServoConfig);
}



/*********************************************************

TIMED MOTOR CONTROL OPERATION

spdl = speed for left servo
spdr = speed for right servo
time = amount of time to run motors before turning them off

time is in units of 0.1 ms

*/
void aMo_Scoot(char spdl, char spdr, int time)
{
  aMo_Go(spdl, spdr);
  aCore_Sleep(time);
  aMo_Go(0, 0);
}



/*********************************************************

DIFFERENTIAL STEERING CONTROL

when dir = 0, both motors go at maxspd
when dir > 0, robot turns right
when dir < 0, robot turns left

sharpest right turn:  left motor=maxspd, right motor=minspd
sharpest right turn:  right motor=maxspd, left motor=minspd

*/
void aMo_Steer(char maxspd, char minspd, char dir)
{
  char lmt=maxspd-minspd;
  if (dir & 0x8000)
  {
    dir = -dir;
    if (dir > lmt) dir = lmt;
    aMo_Go(maxspd-dir, maxspd);
  }
  else
  {
    if (dir > lmt) dir = lmt;
    aMo_Go(maxspd, maxspd-dir);
  }
}



/*********************************************************

ONE WALL-HUG ITERATION
 
requires a range input, a set point input, and side input
performs wall-hugging calculation and
passes result to 2-wheel differential steering routine
(+1 is right wall-hug, -1 is left wall-hug)

*/
void aMo_HugIter(int range, int setpt, int side)
{
  int e=0;
  e = AMO_WHUGGAIN * (setpt - range) * side;
  if (e > AMO_MAXSPD)
    e= AMO_MAXSPD;
  if (e < AMO_MINSPD)
    e= AMO_MINSPD;
  aMo_Steer(AMO_WHUGMAXV, AMO_WHUGMINV, (char)e);
}

#endif /* _aMo_T_ */
