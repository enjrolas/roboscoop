/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* file: aLCD.tea                                                  */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* description: Routines to send data to an IIC LCD display.       */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/*        docs: Documentation can be found in the BrainStem        */
/*              Reference under the major topic "TEA"              */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* Copyright 1994-2008. Acroname Inc.                              */
/*                                                                 */
/* This software is the property of Acroname Inc.  Any             */
/* distribution, sale, transmission, or re-use of this code is     */
/* strictly forbidden except with permission from Acroname Inc.    */
/*                                                                 */
/* To the full extent allowed by law, Acroname Inc. also excludes  */
/* for itself and its suppliers any liability, wheither based in   */
/* contract or tort (including negligence), for direct,            */
/* incidental, consequential, indirect, special, or punitive       */
/* damages of any kind, or for loss of revenue or profits, loss of */
/* business, loss of information or data, or other financial loss  */
/* arising out of or in connection with this software, even if     */
/* Acroname Inc. has been advised of the possibility of such       */
/* damages.                                                        */
/*                                                                 */
/* Acroname Inc.                                                   */
/* www.acroname.com                                                */
/* 720-564-0373                                                    */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


#ifndef _aLCD_T_
#define _aLCD_T_

/*
 * This library works with LCDs that expect
 * a series of printable characters or a device-specific
 * command character followed by a command byte, such as the
 * Matrix Orbital LCD0821.
 */


/*
 * ALCD_ADDR must be defined in the user program
 * before this file is included!!!
 *
 * There are no routines for binary formatting
 * because the result would be too big for popcmd.
 */



/* send an arbitrary byte to the LCD display */
void aLCD_Byte(unsigned char a)
{
  asm
  {
    pushlb	ALCD_ADDR
    pushlb	1
    pushsb	5
    pushlb	3
    popcmd
  }
}

/* format an integer into decimal string
 * and send it out to the LCD display
 */
void aLCD_IntDec(int a)
{
  asm
  {
    pushlb	ALCD_ADDR
    pushlb	0
    pushss	6
    fmtsd
    pushsb	1
    pushsb	1
    pushlb	2
    addb
    popbsx
    pushlb	2
    addb
    popcmd
  }
}

/* format an integer into unsigned decimal string
 * and send it out to the LCD display
 */
void aLCD_IntUdec(int a)
{
  asm
  {
    pushlb	ALCD_ADDR
    pushlb	0
    pushss	6
    fmtsu
    pushsb	1
    pushsb	1
    pushlb	2
    addb
    popbsx
    pushlb	2
    addb
    popcmd
  }
}

/* format an integer into hexadecimal string
 * and send it out to the LCD display
 */
void aLCD_IntHex(int a)
{
  asm
  {
    pushlb	ALCD_ADDR
    pushlb	0
    pushss	6
    fmtsh
    pushsb	1
    pushsb	1
    pushlb	2
    addb
    popbsx
    pushlb	2
    addb
    popcmd
  }
}

/* format a char into decimal string
 * and send it out to the LCD display
 */
void aLCD_CharDec(char a)
{
  asm
  {
    pushlb	ALCD_ADDR
    pushlb	0
    pushsb	5
    fmtbd
    pushsb	1
    pushsb	1
    pushlb	2
    addb
    popbsx
    pushlb	2
    addb
    popcmd
  }
}

/* format a char into unsigned decimal string
 * and send it out to the LCD display
 */
void aLCD_CharUdec(char a)
{
  asm
  {
    pushlb	ALCD_ADDR
    pushlb	0
    pushsb	5
    fmtbu
    pushsb	1
    pushsb	1
    pushlb	2
    addb
    popbsx
    pushlb	2
    addb
    popcmd
  }
}

/* format a char into hexadecimal string
 * and send it out to the LCD display
 */
void aLCD_CharHex(char a)
{
  asm
  {
    pushlb	ALCD_ADDR
    pushlb	0
    pushsb	5
    fmtbh
    pushsb	1
    pushsb	1
    pushlb	2
    addb
    popbsx
    pushlb	2
    addb
    popcmd
  }
}

/* send a string out to the LCD display */
void aLCD_String(string s)
{
  asm {
    pushsb	3
next:
    brz		end
    pushlb	ALCD_ADDR
    pushlb	1
    pushsb	3
    pushlb	6
    addb
    pushsbx
    pushlb	3
    popcmd
    decb 	1
    goto	next
end:
    popb
  }
}

#endif /* _aLCD_T_ */
