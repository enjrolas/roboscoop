/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* file: aSRF05.tea                                                */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* description: Routines for interfacing to the Devantech SRF05	   */
/*              ranging module.                                    */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/*        docs: Documentation can be found in the BrainStem        */
/*              Reference under the major topic "TEA"              */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* Copyright 1994-2008. Acroname Inc.                              */
/*                                                                 */
/* This software is the property of Acroname Inc.  Any             */
/* distribution, sale, transmission, or re-use of this code is     */
/* strictly forbidden except with permission from Acroname Inc.    */
/*                                                                 */
/* To the full extent allowed by law, Acroname Inc. also excludes  */
/* for itself and its suppliers any liability, wheither based in   */
/* contract or tort (including negligence), for direct,            */
/* incidental, consequential, indirect, special, or punitive       */
/* damages of any kind, or for loss of revenue or profits, loss of */
/* business, loss of information or data, or other financial loss  */
/* arising out of or in connection with this software, even if     */
/* Acroname Inc. has been advised of the possibility of such       */
/* damages.                                                        */
/*                                                                 */
/* Acroname Inc.                                                   */
/* www.acroname.com                                                */
/* 720-564-0373                                                    */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#ifndef _aSRF05_T_
#define _aSRF05_T_

#include <aIOPorts.tea>

/* ********************************************************
    Function name: aSRF05Mode1_ReadInt(char, char)
    Description: Function to use the SRF05 in Mode 1.
    Wiring Diagram:
    
      -----------
      |         |
      |    B    |
      |0   O   0|--- GND
      |0   T   0|--- No connection (or 5V)
      |0   T   0|--- Trigger (Digital pin)
      |0   O   0|--- Echo (Digital pin)
      |0   M   0|--- 5V
      |         |
      |  SRF05  |
      -----------
*/
int aSRF05Mode1_ReadInt(char trigger, char echo){
  int val = 0;
  asm
  {
    // Calculate init base short
    // [aPortDigital + (aPortDigitalBlockSize * initPin)]
    pushsb 6 /* init byte */
    pushlb aPortDigitalBlockSize
    multb
    pushls aPortDigital
    adds 
    
    // Calculate the echo base short
    pushsb 7 /* echo byte in stack */
    pushlb aPortDigitalBlockSize
    multb
    pushls aPortDigital
    adds
    
    // Configure digital init pin short
    pushlb 0 /* 0 is an output */
    pushls aOffsetDigitalConfig
    pushss 7 /* grab init base short from stack */
    adds /* init base + aOffsetDigitalConfig */
    popbmx
    
    // Configure digital echo pin short
    pushlb 1 /* 1 is an input */
    pushls aOffsetDigitalConfig
    pushss 5 /* grab echo base short from stack */
    adds /* echo base + aOffsetDigitalConfig */
    popbmx
    
    // Set init pin up as DIO and turn on
    pushlb 1 /* Set the init pin high */
    pushls aOffsetDigitalIO
    pushss 7 /* Grab init base short */
    adds
    popbmx
    
    // Stall a bit using port timer
    pushlb 1
    popbm aPortVMTimer
    
    // Set init pin up as DIO and turn on
    pushlb 0 /* Set the init pin high */
    pushls aOffsetDigitalIO
    pushss 7 /* Grab init base short */
    adds
    popbmx
    
    // Set the ptimer up
    pushls aOffsetDigitalPTime
    pushss 4 /* grab the echo base short */
    adds
    pushmsx /* trigger the ptimer capture */
    
    // Store the result
    popss 6
    
    // Trash the echo and init base shorts
    popn 4
  
  }
  return val;  
}


/* ********************************************************
    Function name: aSRF05Mode2_ReadInt(char)
    Description: Function to use the SRF05 in Mode 2.
      This is the single wire mode.
		Wiring Diagram:
    
      -----------
      |         |
      |    B    |
      |0   O   0|--- GND
      |0   T   0|--- No connection (or 5V)
      |0   T   0|--- Trigger/Echo (Digital pin)
      |0   O   0|--- No connection (or 5V)
      |0   M   0|--- 5V
      |         |
      |  SRF05  |
      -----------
      
    Pseudocode:
      Step 1.) Determine the target trigger/echo pin address.
      Step 2.) Preload stack with pulse timer capture.
      Step 3.) Preload stack to configure pin as input.
      Step 4.) Preload stack with low signal on digital pin.
      Step 5.) Preload stack with timer delay value.
      Step 6.) Preload stack with high signal on digital pin.
      Step 7.) Preload stack to configure pin as output.
      Step 8.) Execute instructions on the stack.
      Step 9.) Store the value to return.
 */
 int aSRF05Mode2_ReadInt(char digitalPin)
{
  int val = 0;
  asm
  {
    /* Step 1: Determine the target pin address (aka trigger/echo) */
    pushsb	5 /* Current stack location where the digital pin */
    pushlb	aPortDigitalBlockSize /* Get ready to multiply dig port by 4 */
    multb
    pushls aPortDigital
    adds
    
    /* ************** Begin stacking the stack. Preloading. ************** */   
    
    /* Step 2: Use the pulse timer capture of the digital pin */
    pushss 2 /* Slide a copy of the desired pin address. */
    pushls aPortDigital + aOffsetDigitalPTime
    ors /* Combine the Pulse time with the dig pin */
    
    /* Step 3: Configure the digital pin up to be an input */
    pushlb 1 /* Set the pin to an input state */
    pushss 5 /* Slide a copy of the desired pin address */
    pushls aPortDigital + aOffsetDigitalConfig
    ors /* Combine with the target pin base address */
    
    /* Step 4: Send a low signal out the output pin */
    pushlb 0 /* Set pin value to low */
    pushss 8
    pushls aPortDigital + aOffsetDigitalIO
    ors /* Combine with target pin address */    
    
    /* Step 5: Wait amount for echo signal */
    pushlb 1 /* One timer unit. Need 0.1 msec */    
    
    /* Step 6: Send a high signal out the output pin */
    pushlb 1 /* Set pin value to high */
    pushss 12 /* Slide a copy of the desired pin address */
    pushls aPortDigital + aOffsetDigitalIO
    ors /* Combine with target pin address */
    
    /* Step 7: Set the digital pin up to be an output */
    pushlb 0 /* Set the pin to be an output */
    pushss 15 /* Slide a copy of the desired pin address */
    pushls aPortDigital + aOffsetDigitalConfig
    ors /* Combine with the target pin base address */

    /* ************** Execution Instructions ************** */ 
    
    /* Step 8: Execute commands sitting on the stack. */
    popbmx /* Set the digital pin up to be an output */
    popbmx /* Send a high signal to the ouput pin */
    popbm aPortVMTimer /* Delay to create as duty cycle */
    popbmx /* Send a low signal to the output pin */
    popbmx /* Configure the digital pin to be an input */
    pushmsx /* Wait for a transition on digital pin */
    
    /* Step 9: Move the return value into return value stack */
    popss 4 /* Put reading into the variable "val" stack position */ 
    
    /* Step 10: Reset after the polling transition */
    pushlb 1 /* A number to reset the polling transition */
    pushss 3 /* Get another copy of the pin address */
    pushls aPortDigital + aOffsetDigitalPReset
    ors /* Combine with the target pin base address */
    popbmx /* Write the configuration to the pin address */
    
    popn 2 /* Get rid of excess */

  }
  return val;
} /* aSRF05Mode2_ReadInt */

#endif /* _aSRF05_T_ */
