/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* file: aRLY08.tea                                                */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* description: Routines for interfacing to the Devantech          */
/*              I2C Relay module.                                  */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/*        docs: Documentation can be found in the BrainStem        */
/*		reference under the major topic "TEA"                        */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* Copyright 1994-2008. Acroname Inc.                              */
/*                                                                 */
/* This software is the property of Acroname Inc.  Any             */
/* distribution, sale, transmission, or re-use of this code is     */
/* strictly forbidden except with permission from Acroname Inc.    */
/*                                                                 */
/* To the full extent allowed by law, Acroname Inc. also excludes  */
/* for itself and its suppliers any liability, wheither based in   */
/* contract or tort (including negligence), for direct,            */
/* incidental, consequential, indirect, special, or punitive       */
/* damages of any kind, or for loss of revenue or profits, loss of */
/* business, loss of information or data, or other financial loss  */
/* arising out of or in connection with this software, even if     */
/* Acroname Inc. has been advised of the possibility of such       */
/* damages.                                                        */
/*                                                                 */
/* Acroname Inc.                                                   */
/* www.acroname.com                                                */
/* 720-564-0373                                                    */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#ifndef _aRLY08_T_
#define _aRLY08_T_

#include <aIOPorts.tea>

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * aRLY08_GetVersion
 *
 * Get the software version number
 *
 * Stack on entry:
 *
 * byte       from top       value
 *  0            5             rv
 *  1            4             controllerAddr
 *  2            3             rah
 *  3            2             ral
 *  4            1             val
 */

char aRLY08_GetVersion(unsigned char controllerAddr)
{
  char val=0;

  asm {

   /* store the current IIC speed to restore later  */
   pushmb aPortIICBaud
   
   /* set to 100kHz for the RLY08 */
   pushlb 0
   popbm  aPortIICBaud

   /* set the memory pointer in the RLY08           */
   pushsb 5                    /* address param     */
   pushlb 1                    /* data size         */
   pushlb 0                    /* register address  */
   pushlb 3                    /* packet size       */
   popcmd

   /* read the voltage value as a one byte value    */
   pushsb 5                    /* add one for read  */
   pushlb 1
   addb
   pushlb 1	                   /* bytes to read     */
   popsm  aPortIICRead

   /* store into val                                */
   popbs  2

   /* restore entry IIC speed                       */
   popbm  aPortIICBaud
  }

  return val;

}  /* aMD23_GetVersion */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * aRLY08_GetRelyStates
 *
 * Get the current relay states
 *
 * Stack on entry:
 *
 * byte       from top       value   
 *  0            5             rv      
 *  1            4             controllerAddr
 *  2            3             rah     
 *  3            2             ral     
 *  4            1             val     
 */

char aRLY08_GetRelayStates(unsigned char controllerAddr)
{
  char val=0;

  asm {

   /* store the current IIC speed to restore later  */
   pushmb aPortIICBaud
   
   /* set to 100kHz for the RLY08 */
   pushlb 0
   popbm  aPortIICBaud

   /* set the memory pointer in the RLY08           */      
   pushsb 5                    /* address param     */
   pushlb 1                    /* data size         */      
   pushlb 1                    /* register address  */
   pushlb 3                    /* packet size       */      
   popcmd  

   /* read the voltage value as a one byte value    */
   pushsb 5                    /* add one for read  */
   pushlb 1
   addb
   pushlb 1                    /* bytes to read     */
   popsm  aPortIICRead

   /* store into val                                */      
   popbs  2

   /* restore entry IIC speed                       */      
   popbm  aPortIICBaud
  }

  return val;

}  /* RLY08_GetRelayStates */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * aRLY08_SetRelaysOff
 *
 * Turn all the relays off
 *
 * Stack on entry:
 *
 * byte       from top       value   
 *  0            3             controllerAddr
 *  1            2             rah     
 *  2            1             ral     
 */

void aRLY08_SetRelaysOff(unsigned char controllerAddr)
{
  asm {

   /* store the current IIC speed to restore later  */
   pushmb aPortIICBaud
   
   /* set to 100kHz for the RLY08 */
   pushlb 0
   popbm  aPortIICBaud

   /* set the memory pointer in the RLY08           */      
   pushsb 4                    /* address param     */
   pushlb 2                    /* data size         */      
   pushlb 0                    /* register address  */
   pushlb 110
   pushlb 4                    /* packet size       */      
   popcmd  

   /* restore entry IIC speed                       */      
   popbm  aPortIICBaud
  }

}  /* RLY08_SetRelaysOff */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * aRLY08_SetRelaysOn
 *
 * Turn all the relays on
 *
 * Stack on entry:
 *
 * byte       from top       value   
 *  0            3             controllerAddr
 *  1            2             rah     
 *  2            1             ral     
 */

void aRLY08_SetRelaysOn(unsigned char controllerAddr)
{
  asm {

   /* store the current IIC speed to restore later  */
   pushmb aPortIICBaud
   
   /* set to 100kHz for the RLY08 */
   pushlb 0
   popbm  aPortIICBaud

   /* set the memory pointer in the RLY08           */      
   pushsb 4                    /* address param     */
   pushlb 2                    /* data size         */      
   pushlb 0                    /* register address  */
   pushlb 100
   pushlb 4                    /* packet size       */      
   popcmd  

   /* restore entry IIC speed                       */      
   popbm  aPortIICBaud
  }

}  /* RLY08_SetRelaysOn */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * aRLY08_SetRelayOn
 *
 * Turn a single relay on defined by input parameter
 *
 * Stack on entry:
 *
 * byte       from top       value
 *  0            4             controllerAddr
 *  1            3             value 
 *  2            2             rah
 *  3            1             ral
 */

void aRLY08_SetRelayOn(unsigned char controllerAddr, char value)
{
  asm {

   /* store the current IIC speed to restore later  */
   pushmb aPortIICBaud
  
   /* set to 100kHz for the RLY08 */
   pushlb 0
   popbm  aPortIICBaud

   /* set the memory pointer in the RLY08           */
   pushsb 5                    /* address param     */
   pushlb 2                    /* data size         */
   pushlb 0                    /* register address  */
   pushsb 7                    /* desired relay val */
   pushlb 100                  /* register offset   */
   addb                        /* reg offset + val  */
   pushlb 4                    /* packet size       */
   popcmd                      /* ship it           */

   /* restore entry IIC speed                       */
   popbm  aPortIICBaud
  }

}  /* RLY08_SetRelayOn */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * aRLY08_SetRelayOff
 *
 * Turn a single relay off defined by input parameter
 *
 * Stack on entry:
 *
 * byte       from top       value
 *  0            4             controllerAddr
 *  1            3             value
 *  2            2             rah
 *  3            1             ral
 */

void aRLY08_SetRelayOff(unsigned char controllerAddr, char value)
{
  asm {

   /* store the current IIC speed to restore later  */
   pushmb aPortIICBaud
 
   /* set to 100kHz for the RLY08 */
   pushlb 0
   popbm  aPortIICBaud

   /* set the memory pointer in the RLY08           */
   pushsb 5                    /* address param     */
   pushlb 2                    /* data size         */
   pushlb 0                    /* register address  */
   pushsb 7                    /* desired relay val */
   pushlb 110                  /* register offset   */
   addb                        /* reg offset + val  */
   pushlb 4                    /* packet size       */
   popcmd                      /* ship it           */

   /* restore entry IIC speed                       */
   popbm  aPortIICBaud
  }

}  /* RLY08_SetRelayOff */

#endif /* _aRLY08_T_ */
