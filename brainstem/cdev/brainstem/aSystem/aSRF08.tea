/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* file: aSRF08.tea                                                */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* description: Routines for interfacing to the Devantech          */
/*              SRF08 ranger module.                               */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/*        docs: Documentation can be found in the BrainStem        */
/*		reference under the major topic "TEA"              */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* Copyright 1994-2008. Acroname Inc.                              */
/*                                                                 */
/* This software is the property of Acroname Inc.  Any             */
/* distribution, sale, transmission, or re-use of this code is     */
/* strictly forbidden except with permission from Acroname Inc.    */
/*                                                                 */
/* To the full extent allowed by law, Acroname Inc. also excludes  */
/* for itself and its suppliers any liability, wheither based in   */
/* contract or tort (including negligence), for direct,            */
/* incidental, consequential, indirect, special, or punitive       */
/* damages of any kind, or for loss of revenue or profits, loss of */
/* business, loss of information or data, or other financial loss  */
/* arising out of or in connection with this software, even if     */
/* Acroname Inc. has been advised of the possibility of such       */
/* damages.                                                        */
/*                                                                 */
/* Acroname Inc.                                                   */
/* www.acroname.com                                                */
/* 720-564-0373                                                    */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#ifndef _aSRF08_T_
#define _aSRF08_T_

#include <aIOPorts.tea>
#include <aSRF08Defs.tea>


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * aSRF08_RangeInt
 *
 * Read an int (2-byte) value from the SRF08 module as a single
 * distance reading in the units specified.
 * Also temporarily moves the IIC bus speed down to 400kHz for 
 * the reading and then restores the previous IIC bus speed.
 */

int aSRF08_RangeInt(unsigned char rangerAddr,
		    unsigned char unitCode)
{
  int val=0;

  asm {

   /* store the current IIC speed to restore later  */
   pushmb aPortIICBaud
   
   /* set to 400kHz for the SRF08                   */
   pushlb 1
   popbm  aPortIICBaud

   /* set the memory pointer in the SRF08           */
   pushsb 7  		       /* address param     */
   pushlb 2                    /* data size         */
   pushlb 0                    /* register address  */
   pushsb 9		       /* type              */
   pushlb 4                    /* packet size       */
   popcmd

   /* stall to let the SRF08 take reading      */
   pushls (int)aSRF08_READDELAYMS * 10
   popsm  aPortVMTimer

   /* set the memory pointer in the SRF08           */
   pushsb 7                    /* address param     */
   pushlb 1                    /* data size         */
   pushlb 2                    /* register address  */
   pushlb 3                    /* packet size       */
   popcmd

   /* read the current heading as a two byte value  */
   pushsb 7                    /* add one for read  */
   pushlb 1
   addb
   pushlb 2	               /* bytes to read     */
   popsm  aPortIICRead

   /* store into val                                */
   popss  3

   /* restore entry IIC speed                       */
   popbm  aPortIICBaud
  }

  return val;

}  /* aSRF08_RangeInt */


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * aSRF08_Range
 *
 * Initialize a range reading from an SRF08.
 *
 * Stack on entry:
 *
 * byte       from top       value
 *  0            4             rangerAddr
 *  1            3             unitCode
 *  2            2             rah
 *  3            1             ral
 */

void aSRF08_Range(unsigned char rangerAddr,
		  unsigned char unitCode)
{
  asm {

   /* store the current IIC speed to restore later  */
   pushmb aPortIICBaud
   
   /* set to 400kHz for the SRF08                   */
   pushlb 1
   popbm  aPortIICBaud

   /* set the memory pointer in the SRF08           */
   pushsb 5  		       /* address param     */
   pushlb 2                    /* data size         */
   pushlb 0                    /* register address  */
   pushsb 7		       /* type              */
   pushlb 4                    /* packet size       */
   popcmd

   /* restore entry IIC speed                       */
   popbm  aPortIICBaud
  }

}  /* aSRF08_Range */


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * aSRF08_LightChar
 *
 * Get the light sensor reading from an SRF08.
 *
 * The range reading must be first initiated using aSRF08_Range.
 *
 * There must be a delay of 70ms between the aSRF08_Range call 
 * and the call to this routine.
 *
 * Stack on entry:
 *
 * byte       from top       value
 *  0            5             rv
 *  1            4             rangerAddr
 *  2            3             rah
 *  3            2             ral
 *  4            1             val
 */

char aSRF08_LightChar(unsigned char rangerAddr)
{
  char val=0;

  asm {

   /* store the current IIC speed to restore later  */
   pushmb aPortIICBaud
   
   /* set to 400kHz for the SRF08                   */
   pushlb 1
   popbm  aPortIICBaud

   /* set the memory pointer in the SRF08           */
   pushsb 5                    /* address param     */
   pushlb 1                    /* data size         */
   pushlb 1                    /* register address  */
   pushlb 3                    /* packet size       */
   popcmd

   /* read the light value as a one byte value  */
   pushsb 5                    /* add one for read  */
   pushlb 1
   addb
   pushlb 1	               /* bytes to read     */
   popsm  aPortIICRead

   /* store into val                                */
   popbs  2

   /* restore entry IIC speed                       */
   popbm  aPortIICBaud
  }

  return val;

}  /* aSRF08_LightChar */


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * aSRF08_NextEchoInt
 *
 * Get the next echo reading from an SRF08.
 *
 * Three things must take place before this is called:
 *  1. aSRF08_Range must be called
 *  2. a stall of 70 ms must occur
 *  3. the reading pointer must be set with aSRF08_LightInt
 *
 * Stack on entry:
 *
 * byte       from top       value
 *  0            7             rvh
 *  1            6             rvl
 *  2            5             rangerAddr
 *  3            4             rah
 *  4            3             ral
 *  5            2             val_high
 *  6            1             val_low
 */

int aSRF08_NextEchoInt(unsigned char rangerAddr)
{
  int val=0;

  asm {

   /* store the current IIC speed to restore later  */
   pushmb aPortIICBaud
   
   /* set to 400kHz for the SRF08                   */
   pushlb 1
   popbm  aPortIICBaud

   /* read the light value as a two byte value  */
   pushsb 6                    /* add one for read  */
   pushlb 1
   addb
   pushlb 2	               /* bytes to read     */
   popsm  aPortIICRead

   /* store into val                                */
   popss  3

   /* restore entry IIC speed                       */
   popbm  aPortIICBaud
  }

  return val;

}  /* aSRF08_NextEchoInt */


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * aSRF08_RangeGain
 *
 * Change the maximum range and gain settings in an SRF08.
 *
 * Stack on entry:
 *
 * byte from top value
 * 0 5 rangerAddr
 * 1 4 maxRange
 * 2 3 maxGain
 * 3 2 rah
 * 4 1 ral
 *
 * Thanks to Samuel A. Miller for contributing this routine!
 */

void aSRF08_RangeGain(
  unsigned char rangerAddr, 
  unsigned char maxGain, 
  unsigned char maxRange)
{
  asm {

    //store the current IIC speed to restore later
    pushmb aPortIICBaud

    //set to 400kHz for the SRF08
    pushlb 1
    popbm aPortIICBaud

    //set the memory pointer in the SRF08 for the maximum analog gain
    pushsb 6 //address param (pushed down by aPortIICBaud)
    pushlb 2 //data size
    pushlb 1 //max-gain register address
    pushsb 8 //maxGain value (passed into function, then pushed down)
    pushlb 4 //packet size
    popcmd

    //set the memory pointer in the SRF08 for the maximum range
    pushsb 6 //address param (pushed down by aPortIICBaud)
    pushlb 2 //data size
    pushlb 2 //max-range register address
    pushsb 7 //maxRange value (passed into function, then pushed down)
    pushlb 4 //packet size
    popcmd

    //restore entry IIC speed
    popbm aPortIICBaud
  }

} //aSRF08_RangeGain 

#endif /* _aSRF08_T_ */
