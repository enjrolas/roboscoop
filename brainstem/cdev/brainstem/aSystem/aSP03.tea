/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* file: aSP03.tea                                                 */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* description: Routines for interfacing to the Devantech          */
/*              SP03 speech synthesizer module.                    */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/*        docs: Documentation can be found in the BrainStem        */
/*		Reference under the major topic "TEA"              */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* Copyright 1994-2008. Acroname Inc.                              */
/*                                                                 */
/* This software is the property of Acroname Inc.  Any             */
/* distribution, sale, transmission, or re-use of this code is     */
/* strictly forbidden except with permission from Acroname Inc.    */
/*                                                                 */
/* To the full extent allowed by law, Acroname Inc. also excludes  */
/* for itself and its suppliers any liability, wheither based in   */
/* contract or tort (including negligence), for direct,            */
/* incidental, consequential, indirect, special, or punitive       */
/* damages of any kind, or for loss of revenue or profits, loss of */
/* business, loss of information or data, or other financial loss  */
/* arising out of or in connection with this software, even if     */
/* Acroname Inc. has been advised of the possibility of such       */
/* damages.                                                        */
/*                                                                 */
/* Acroname Inc.                                                   */
/* www.acroname.com                                                */
/* 720-564-0373                                                    */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#ifndef _aSP03_T_
#define _aSP03_T_

#include <aCore.tea>
#include <aIOPorts.tea>

#define aSP03WRADDR	(unsigned char)0xC4
#define aSP03RDADDR	(unsigned char)0xC5
#define aSP03CMD	0x00
#define aSP03NOP	0x00
#define aSP03SPKBUF	0x40



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * aSP03_CheckCompletion
 *
 * Checks for completion of a phrase being spoken.
 * Returns 0 if phrase is complete,
 * otherwise it returns phrase number.
 */

char aSP03_CheckCompletion()
{
  char val=0;
  asm
  {
   /* store the current IIC speed to restore later   */
   pushmb   aPortIICBaud

   /* set to 100kHz for the SP03                     */
   pushlb   0
   popbm    aPortIICBaud

   pushlb   aSP03WRADDR         /* address param     */
   pushlb   1                   /* data size         */
   pushlb   aSP03CMD            /* register address  */
   pushlb   3                   /* packet size       */
   popcmd
   pushlb   aSP03RDADDR
   pushlb   1                   /* bytes to read     */
   popsm    aPortIICRead
   popbs    2                   /* store as char     */

   /* restore entry IIC speed                        */
   popbm    aPortIICBaud
  }
  return val;
} /* aSP03_CheckCompletion */



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * aSP03_WaitForCompletion
 *
 * Waits until phrase being spoken is completed.
 */

void aSP03_WaitForCompletion()
{
  while (aSP03_CheckCompletion())
  {
   // a brief delay decreases the I2C bus traffic
   aCore_Sleep(200);
  }
} /* aSP03_WaitForCompletion */



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * aSP03_SpeakPhrase
 *
 * Speaks a preset phrase by index number. Doesn't do any bounds
 * checking on the phrase index passed in.
 */

void aSP03_SpeakPhrase(unsigned char nPhrase)
{
  asm {

   /* store the current IIC speed to restore later   */
   pushmb   aPortIICBaud

   /* set to 100kHz for the SP03                     */
   pushlb   0
   popbm    aPortIICBaud

   /* write the phrase command to the SP03           */
   pushlb   aSP03WRADDR         /* address param     */
   pushlb   2                   /* data size         */
   pushlb   aSP03CMD            /* register address  */
   pushsb   7                   /* phrase num stack  */
   				/* offset            */
   pushlb   4                   /* packet size       */
   popcmd			/* dump to IIC bus   */

   /* restore entry IIC speed                        */
   popbm    aPortIICBaud
  }

} /* aSP03_SpeakPhrase */



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * aSP03_SpeakString
 *
 * Speaks an arbitrary phrase with the specified settings.
 *
 * stack:
 *   0       x       volume              \
 *   1       x       pitch                |
 *   2       x       speed                |
 *   3	     x       s[0]                 |
 *   4       x       s[1]                  \__ call
 *   :       :       :                     /  stack
 *   :               s[n]                 |
 *                   length of str (n+1)  |
 *                   rah                  |
 *                   ral                 /                  
 *                   iic save   _________\___ routine
 *                   len to send         /    stack
                     iic address         \
                     packet size          |
                     cmd                  |
                     NOP                  |
		     byte 1               |   maximal
		     byte 2               |-- IIC
		     byte 3               |   packet
		     byte 4               |
		     byte 5               |
		     byte 6               |
		     popcmd size         /
		     data pointer        \    working
		     packet pointer       |-- data
		     bytes left          /
 */

void aSP03_SpeakString(unsigned char nVolume,
		       unsigned char nPitch,
		       unsigned char nSpeed,
		       string s)
{
  asm {

   /* store the current IIC speed to restore later   */
   pushmb   aPortIICBaud

   /* set to 100kHz for the SP03                     */
   pushlb   0
   popbm    aPortIICBaud

   /* compute the total number of bytes to write     *
    * which is:                                      *
    *   1 volume                                     *
    *   1 pitch                                      *
    *   1 speed                                      *
    *   len text bytes                               *
    *  -1 text size byte                             *
    *   1 terminator                                 *
    *   total = len + 3                              */
   pushsb   4			/* push the len      */
   pushlb   3                   /* add 3             */
   addb

   /* if there are no bytes left, we are done        */
next:
   brz	    end

   /* build the next speech data packet starting     * 
    * with the address                               */

   pushlb   aSP03WRADDR         /* address param     */
   /* then the data length for the packet            */
   pushsb   2			/* get bytes left    */
   pushlb   6			/* calculate next    */
   subb			 	/* packet size       */
   brneg    next_notfull
   popb
   pushlb   6                   /* size = full       */
   goto     next_pushcmd
next_notfull:
   popb
   pushsb   2                   /* size = bytes left */

next_pushcmd:

   pushlb   aSP03CMD            /* register address  */
   pushlb   aSP03NOP            /* write buffer cmd  */

   /* push the maximal storage for the packet        */
   pushn    6			/* bytes + packet    */
		                /* size              */

   /* set up pointer to data to copy                 */
   pushsb   11                  /* get len           */
   pushlb   18
   addb

   /* set up pointer to packet location              */
   pushlb   9                   /* points to byte 1  */
   
   /* next, store bytes left to copy                 */
   pushsb   11			/* packet bytes      */

next_byte:
   brz      packet_done		/* bail when packet  */
   				/* is done           */

   /* go get the next data byte                      */
   pushsb   3			/* get data pointer  */
   pushsbx
   decb     4                   /* advance pointer   */
   
   /* store the data byte                            */
   pushsb   3                   /* get packet ptr    */
   popbsx
   decb     2			/* advance pointer   */
   
   decb     14                  /* decrement overall */
   decb     1			/* count byte copied */
   goto     next_byte

packet_done:

   /* patch up the sizes in the packet               */
   pushsb   12                  /* get the data size */
   pushlb   2                   /* add CMD and NOP   */
   addb
   
   pushsb   1                   /* get a copy        */
   popbs    13                  /* fix packet length */
   
   pushlb   2                   /* add 2, len, addr  */
   addb

        /* top now contains total packet size */
   
   /* insert the packet size where it belongs        */
   pushlb   13
   pushsb   2
   subb
   popbsx

   /* clean off the stack to the packet              */
   pushlb   10
   pushsb   13
   subb
   popnx
   
   /* send the actual command                        */
   popcmd

   /* set up for the next packet                     */
   pushsb   1
   popb
   goto     next

end:

   /* null terminate buffer */
   pushlb   aSP03WRADDR         /* address param     */
   pushlb   3                   /* data size         */
   pushlb   aSP03CMD            /* register address  */
   pushlb   aSP03NOP            /* write buffer cmd  */
   pushlb   0
   pushlb   5                   /* packet size       */
   popcmd			/* dump to IIC bus   */

   /* now that the buffer is set, speak it           */
   pushlb   aSP03WRADDR         /* address param     */
   pushlb   2                   /* data size         */
   pushlb   aSP03CMD            /* register address  */
   pushlb   aSP03SPKBUF         /* speak buffer cmd  */
   pushlb   4                   /* packet size       */
   popcmd			/* dump to IIC bus   */

   popb                         /* discard size      */
   
   /* restore entry IIC speed                        */
   popbm    aPortIICBaud
  }

} /* aSP03_SpeakString */



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * aSP03_SpeakInt
 *
 * Speaks an arbitrary number with the specified settings.
 */
void aSP03_SpeakInt(unsigned char nVolume,
		       unsigned char nPitch,
		       unsigned char nSpeed,
		       int n)
{
  asm
  {
   /* store the current IIC speed to restore later   */
   pushmb   aPortIICBaud

   /* set to 100kHz for the SP03                     */
   pushlb   0
   popbm    aPortIICBaud

   /* send volume, pitch, speed */
   pushlb   aSP03WRADDR         /* address param     */
   pushlb   5                   /* data size         */
   pushlb   aSP03CMD            /* register address  */
   pushlb   aSP03NOP            /* write buffer cmd  */
   pushsb   12
   pushsb   12
   pushsb   12
   pushlb   7                   /* packet size       */
   popcmd			/* dump to IIC bus   */
   
   /* initialize packet */
   pushlb   aSP03WRADDR         /* address param     */
   pushlb   0                   /* temp size         */
   pushlb   aSP03CMD            /* register address  */
   pushlb   aSP03NOP            /* write buffer cmd  */
   
   /* push parameter and convert it */
   pushss   9
   fmtsd
   
   /* top byte has number of characters */
   pushlb   4                   /* +4 for cmd size   */
   addb
   pushsb   1                   /* copy size         */
   pushlb   -2                  /* -2 for packetsize */
   addb
   pushsb   1                   /* copy size         */
   pushlb   2                   /* +2 for offset     */
   addb
   popbsx

   /* packet is fabbed, send it */
   popcmd

   /* null terminate buffer */
   pushlb   aSP03WRADDR         /* address param     */
   pushlb   3                   /* data size         */
   pushlb   aSP03CMD            /* register address  */
   pushlb   aSP03NOP            /* write buffer cmd  */
   pushlb   0
   pushlb   5                   /* packet size       */
   popcmd			/* dump to IIC bus   */

   /* now that the buffer is set, speak it           */
   pushlb   aSP03WRADDR         /* address param     */
   pushlb   2                   /* data size         */
   pushlb   aSP03CMD            /* register address  */
   pushlb   aSP03SPKBUF         /* speak buffer cmd  */
   pushlb   4                   /* packet size       */
   popcmd			/* dump to IIC bus   */

   /* restore entry IIC speed                        */
   popbm    aPortIICBaud
  }
} /* aSP03_SpeakInt */

#endif /* _aSP03_T_ */
