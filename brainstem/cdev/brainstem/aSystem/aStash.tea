/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* file: aStash.tea                                                */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* description: Routines for a process that acts as an extra       */
/*              storage area for RAM bytes.                        */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/*        docs: Documentation can be found in the BrainStem        */
/*              Reference under the major topic "TEA"              */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* Copyright 1994-2008. Acroname Inc.                              */
/*                                                                 */
/* This software is the property of Acroname Inc.  Any             */
/* distribution, sale, transmission, or re-use of this code is     */
/* strictly forbidden except with permission from Acroname Inc.    */
/*                                                                 */
/* To the full extent allowed by law, Acroname Inc. also excludes  */
/* for itself and its suppliers any liability, wheither based in   */
/* contract or tort (including negligence), for direct,            */
/* incidental, consequential, indirect, special, or punitive       */
/* damages of any kind, or for loss of revenue or profits, loss of */
/* business, loss of information or data, or other financial loss  */
/* arising out of or in connection with this software, even if     */
/* Acroname Inc. has been advised of the possibility of such       */
/* damages.                                                        */
/*                                                                 */
/* Acroname Inc.                                                   */
/* www.acroname.com                                                */
/* 720-564-0373                                                    */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#ifndef _aStash_T_
#define _aStash_T_


// Size of 100 is valid for GP and Moto
#define	STASHSIZE	100


/* This function implements a stash of bytes in RAM.
 * The stash size is constant and maximum because
 * a stash process can't do anything else.  A stash
 * process must be ended by killing it.
 */
void aStash_ByteGo()
{
  asm
  {
    pushn	STASHSIZE
wait:    
    pushms	aPortProcID
    pushls	aPortSemaphore
    adds
    pushmbx		/* get mode */
    brz		readstash
writestash:
    popb		/* delete mode byte */
    pushms	aPortProcID
    pushls	aPortSemaphore
    adds
    pushmsx		/* get data,index */
    pushlb	1	/* one-based index */
    addb
    popbsx		/* stack[sp-index]=data */
    goto	wait
readstash:
    popb		/* delete mode byte */
    pushms	aPortProcID
    pushls	aPortSemaphore
    adds
    pushmsx		/* get index, dest. ID */
    pushsb	2	/* copy index */
    pushlb	3	/* 2 bytes on stack + 1-based */
    addb
    pushsbx		/* push stack[sp-(index+3)] */
    pushsb	2	/* copy dest. ID */
    convbs
    pushls	aPortSemaphore
    adds
    popbmx 	    	/* data out to destination */
    popn	2	/* get rid of temp bytes */
    goto	wait
  }
}

/* Writes byte into the stack space of a stash process */
void aStash_ByteWr(char ProcID, char index, unsigned char data)
{
  asm
  {
    pushlb	1	/* send WR mode byte */
    pushsb	6
    convbs
    pushls	aPortSemaphore
    adds
    popbmx
    pushlb	10	/* brief delay for sync */
    popbm	aPortVMTimer
    pushsb	3	/* push data byte */
    pushsb	5	/* push index byte */
    pushsb	7	/* push ProcID byte */
    convbs
    pushls	aPortSemaphore
    adds
    popsmx		/* sema[ProcID]={data,index} */
  }
}

/* Retrieves byte from the stack space of a stash process */
unsigned char aStash_ByteRd(char ProcID, char index)
{
  unsigned char val=0;
  asm
  {
    pushlb	0	/* send RD mode byte */
    pushsb	6
    convbs
    pushls	aPortSemaphore
    adds
    popbmx
    pushlb	10	/* brief delay for sync */
    popbm	aPortVMTimer
    pushsb	4	/* push index byte */
    pushmb	aPortProcID /* push source ProcID byte */
    pushsb	7	/* push dest. ProcID */
    convbs
    pushls	aPortSemaphore
    adds
    popsmx	/* sema[dest]={index,source ProcID} */
    pushms	aPortProcID
    pushls	aPortSemaphore
    adds
    pushmbx	/* get data byte */
    popbs	1
  }
  return val;
}

#endif /* _aStash_T_ */
