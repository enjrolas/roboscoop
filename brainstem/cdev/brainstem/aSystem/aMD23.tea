/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* file: aMD23.tea                                                */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* description: Routines for interfacing to the Devantech          */
/*              MD23 module.                                       */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/*        docs: Documentation can be found in the BrainStem        */
/*		reference under the major topic "TEA"                        */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* Copyright 1994-2008. Acroname Inc.                              */
/*                                                                 */
/* This software is the property of Acroname Inc.  Any             */
/* distribution, sale, transmission, or re-use of this code is     */
/* strictly forbidden except with permission from Acroname Inc.    */
/*                                                                 */
/* To the full extent allowed by law, Acroname Inc. also excludes  */
/* for itself and its suppliers any liability, wheither based in   */
/* contract or tort (including negligence), for direct,            */
/* incidental, consequential, indirect, special, or punitive       */
/* damages of any kind, or for loss of revenue or profits, loss of */
/* business, loss of information or data, or other financial loss  */
/* arising out of or in connection with this software, even if     */
/* Acroname Inc. has been advised of the possibility of such       */
/* damages.                                                        */
/*                                                                 */
/* Acroname Inc.                                                   */
/* www.acroname.com                                                */
/* 720-564-0373                                                    */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#ifndef _aMD23_T_
#define _aMD23_T_

#include <aIOPorts.tea>

#define MD23_ADDR (unsigned char) 176
#define MD23_ENCODERA 0
#define MD23_ENCODERB 1
#define MD23_MOTOR1 0
#define MD23_MOTOR2 1
#define MD23_MODE0 0
#define MD23_MODE1 1
#define MD23_MODE2 2
#define MD23_MODE3 3

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * aMD23_GetBatteryVoltage
 *
 * Get the voltage power input to the MD23.
 *
 * Stack on entry:
 *
 * byte       from top       value
 *  0            5             rv
 *  1            4             controllerAddr
 *  2            3             rah
 *  3            2             ral
 *  4            1             val
 */

char aMD23_GetBatteryVoltage(unsigned char controllerAddr)
{
  char val=0;

  asm {

   /* store the current IIC speed to restore later  */
   pushmb aPortIICBaud
   
   /* set to 100kHz for the MD23 */
   pushlb 0
   popbm  aPortIICBaud

   /* set the memory pointer in the MD23            */
   pushsb 5                    /* address param     */
   pushlb 1                    /* data size         */
   pushlb 10                   /* register address  */
   pushlb 3                    /* packet size       */
   popcmd

   /* read the voltage value as a one byte value    */
   pushsb 5                    /* add one for read  */
   pushlb 1
   addb
   pushlb 1	                   /* bytes to read     */
   popsm  aPortIICRead

   /* store into val                                */
   popbs  2

   /* restore entry IIC speed                       */
   popbm  aPortIICBaud
  }

  return val;

}  /* aMD23_GetBatteryVoltage */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * aMD23_SetMode
 *
 * Set the operational mode for the MD23.
 *
 * Stack on entry:
 *
 * byte       from top       value
 *  0            4             controllerAddr
 *  1            3             mode
 *  2            2             rah
 *  3            1             ral
 */

void aMD23_SetMode(unsigned char controllerAddr, char mode)
{
  asm {

   /* store the current IIC speed to restore later  */
   pushmb aPortIICBaud
   
   /* set to 100kHz for the MD23 */
   pushlb 0
   popbm  aPortIICBaud

   /* set the memory pointer in the MD23            */
   pushsb 5                    /* address param     */
   pushlb 2                    /* data size         */
   pushlb 15                   /* register address  */
   pushsb 7                    /* Operation mode    */
   pushlb 4                    /* packet size       */
   popcmd

   /* restore entry IIC speed                       */
   popbm  aPortIICBaud
  }

}  /* aMD23_SetMode */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * aMD23_SetEncoderZero
 *
 * Set the operational mode for the MD23.
 *
 * Stack on entry:
 *
 * byte       from top       value
 *  0            3             controllerAddr
 *  2            2             rah
 *  3            1             ral
 */

void aMD23_SetEncoderZero(unsigned char controllerAddr)
{
  asm {

   /* store the current IIC speed to restore later  */
   pushmb aPortIICBaud
   
   /* set to 100kHz for the MD23 */
   pushlb 0
   popbm  aPortIICBaud

   /* set the memory pointer in the MD23            */
   pushsb 4                    /* address param     */
   pushlb 2                    /* data size         */
   pushlb 16                   /* register address  */
   pushlb 32                   /* Operation mode    */
   pushlb 4                    /* packet size       */
   popcmd

   /* restore entry IIC speed                       */
   popbm  aPortIICBaud
  }

}  /* aMD23_SetEncoderZero */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * aMD23_GetMode
 *
 * Get the operational mode for the MD23.
 *
 * Stack on entry:
 *
 * byte       from top       value
 *  0            5             rv
 *  1            4             controllerAddr
 *  2            3             rah
 *  3            2             ral
 *  4            1             val
 */

char aMD23_GetMode(unsigned char controllerAddr)
{
  char val=0;

  asm {

   /* store the current IIC speed to restore later  */
   pushmb aPortIICBaud
   
   /* set to 100kHz for the MD23 */
   pushlb 0
   popbm  aPortIICBaud

   /* set the memory pointer in the MD23            */
   pushsb 5                    /* address param     */
   pushlb 1                    /* data size         */
   pushlb 15                   /* register address  */
   pushlb 3                    /* packet size       */
   popcmd

   /* read the voltage value as a one byte value    */
   pushsb 5                    /* add one for read  */
   pushlb 1
   addb
   pushlb 1	                   /* bytes to read     */
   popsm  aPortIICRead

   /* store into val                                */
   popbs  2

   /* restore entry IIC speed                       */
   popbm  aPortIICBaud
  }

  return val;

}  /* aMD23_GetMode */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * aMD23_GetMotorCurrent
 *
 * Get the operational mode for the MD23.
 *
 * Stack on entry:
 *
 * byte       from top       value
 *  0            6             rv
 *  1            5             controllerAddr
 *  2            4             motor
 *  3            3             rah
 *  4            2             ral
 *  5            1             val
 */

char aMD23_GetMotorCurrent(unsigned char controllerAddr, char motor)
{
  char val=0;

  asm {

   /* store the current IIC speed to restore later  */
   pushmb aPortIICBaud
   
   /* set to 100kHz for the MD23 */
   pushlb 0
   popbm  aPortIICBaud

   /* Determine the motor current register to read from */
   pushsb 6 /* Push the controller address              */
   pushlb 1 /* Amount of data bytes to follow           */
   pushlb 11 /* Motor current base address              */
   pushsb 8 /* Get which motor we care about            */
   addb /* m_current_addr + motor (aka 11, or 12)       */
   pushlb 3 /* Length of the packet to send             */
   popcmd /* Execute the command                        */

   /* Read the current value from the registers         */
   pushsb 6 /* Get the device I2C address               */
   pushlb 1
   addb /* Increment the I2C address value to set read  */
   pushlb 1 /* Number of bytes to read                  */
   popsm aPortIICRead

   /* Store into val variable */
   popbs 2

   /* restore entry IIC speed                       */
   popbm  aPortIICBaud

  } // End of asm

  return val;

}  /* aMD23_GetMotorCurrent*/

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * aMD23_GetEncoderLow
 *
 * Get the operational mode for the MD23.
 *
 * Stack on entry:
 *
 * byte       from top       value
 *  0            6             rv
 *  1            5             controllerAddr
 *  2            4             encoder
 *  3            3             rah
 *  4            2             ral
 *  5            1             val
 */

int aMD23_GetEncoderLow(unsigned char controllerAddr, char encoder)
{
  int val=0;

  asm {

   /* store the current IIC speed to restore later  */
   pushmb aPortIICBaud
   
   /* set to 100kHz for the MD23 */
   pushlb 0
   popbm  aPortIICBaud

   /* Determine the motor current register to read from */
   pushsb 7 /* Push the controller address              */
   pushlb 1 /* Amount of data bytes to follow           */
   pushsb 8 /* Desired encoder to read                  */
   pushlb 2 /* Do some math to get the right register   */
   rlb      /* encoder << 2                             */
   pushlb 2 /* We wnat the encoder registers            */
   addb     /* encoder << 2 + 2                         */
   pushlb 3 /* Length of the packet to send             */
   popcmd /* Execute the command                        */

   /* Read the current value from the registers         */
   pushsb 7 /* Get the device I2C address               */
   pushlb 1
   addb /* Increment the I2C address value to set read  */
   pushlb 4 /* Number of bytes to read                  */
   popsm aPortIICRead

   /* Store desired encoder values into val variable    */
   popss 5
   
   /* Get rid of the 2 high bytes of the encoder value  */
   popn 2

   /* restore entry IIC speed                           */
   popbm  aPortIICBaud

  } // End of asm

  return val;

}  /* aMD23_GetEncoderLow */


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * aMD23_GetEncoderHigh
 *
 * Get the high 2 bytes of the encoder readings.
 *
 * Stack on entry:
 *
 * byte       from top       value
 *  0            6             rv
 *  1            5             controllerAddr
 *  2            4             encoder
 *  3            3             rah
 *  4            2             ral
 *  5            1             val
 */
int aMD23_GetEncoderHigh(unsigned char controllerAddr, char encoder)
{
  int val=0;

  asm {

   /* store the current IIC speed to restore later  */
   pushmb aPortIICBaud
   
   /* set to 100kHz for the MD23 */
   pushlb 0
   popbm  aPortIICBaud

   /* Determine the motor current register to read from */
   pushsb 7 /* Push the controller address              */
   pushlb 1 /* Amount of data bytes to follow           */
   pushsb 8 /* Desired encoder to read                  */
   pushlb 2 /* Do some math to get the right register   */
   rlb      /* encoder << 2                             */
   pushlb 2 /* We wnat the encoder registers            */
   addb     /* encoder << 2 + 2                         */
   pushlb 3 /* Length of the packet to send             */
   popcmd /* Execute the command                        */

   /* Read the current value from the registers         */
   pushsb 7 /* Get the device I2C address               */
   pushlb 1
   addb /* Increment the I2C address value to set read  */
   pushlb 4 /* Number of bytes to read                  */
   popsm aPortIICRead
   
   /* Get rid of the 2 low bytes of the encoder value  */
   popn 2

   /* Store desired encoder values into val variable    */
   popss 3

   /* restore entry IIC speed                           */
   popbm  aPortIICBaud

  } // End of asm

  return val;

}  /* aMD23_GetEncoderLow */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * aMD23_SetSpeed1
 *
 * Set the speed1 register for the MD23.
 *
 * Stack on entry:
 *
 * byte       from top       value
 *  0            4             controllerAddr
 *  1            3             value
 *  2            2             rah
 *  3            1             ral
 */

void aMD23_SetSpeed1(unsigned char controllerAddr, char value)
{
  asm {

   /* store the current IIC speed to restore later  */
   pushmb aPortIICBaud
   
   /* set to 100kHz for the MD23 */
   pushlb 0
   popbm  aPortIICBaud

   /* set the memory pointer in the MD23            */
   pushsb 5                    /* address param     */
   pushlb 2                    /* data size         */
   pushlb 0                    /* register address  */
   pushsb 7                    /* Desired value     */
   pushlb 4                    /* packet size       */
   popcmd

   /* restore entry IIC speed                       */
   popbm  aPortIICBaud
  }

}  /* aMD23_SetSpeed1 */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * aMD23_SetSpeed2
 *
 * Set the speed2 register for the MD23.
 *
 * Stack on entry:
 *
 * byte       from top       value
 *  0            4             controllerAddr
 *  1            3             value
 *  2            2             rah
 *  3            1             ral
 */
void aMD23_SetSpeed2(unsigned char controllerAddr, char value)
{
  asm {

   /* store the current IIC speed to restore later  */
   pushmb aPortIICBaud
   
   /* set to 100kHz for the MD23 */
   pushlb 0
   popbm  aPortIICBaud

   /* set the memory pointer in the MD23            */
   pushsb 5                    /* address param     */
   pushlb 2                    /* data size         */
   pushlb 1                    /* register address  */
   pushsb 7                    /* Desired value     */
   pushlb 4                    /* packet size       */
   popcmd

   /* restore entry IIC speed                       */
   popbm  aPortIICBaud
  }

}  /* aMD23_SetSpeed2 */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * aMD23_Mode0_SetSpeed 
 *
 * Runs a desired motor at a desired speed using unsigned numbers.
void aMD23_Mode0_Speed(unsigned char controllerAddr, char motor, unsigned char value)
{
	aMD23_SetMode(controllerAddr,0);
  if (motor)
		aMD23_SetSpeed2(controllerAddr,value);
  else
		aMD23_SetSpeed1(controllerAddr,value);	
} /* aMD23_Mode0_Speed */

#endif /* _aMD23_T_ */

