/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* file: aServo.tea                                                */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* description: Routines for servo functions of all BrainStem      */
/*              Modules.                                           */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/*        docs: Documentation can be found in the BrainStem        */
/*              Reference under the major topic "TEA"              */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* Copyright 1994-2008. Acroname Inc.                              */
/*                                                                 */
/* This software is the property of Acroname Inc.  Any             */
/* distribution, sale, transmission, or re-use of this code is     */
/* strictly forbidden except with permission from Acroname Inc.    */
/*                                                                 */
/* To the full extent allowed by law, Acroname Inc. also excludes  */
/* for itself and its suppliers any liability, wheither based in   */
/* contract or tort (including negligence), for direct,            */
/* incidental, consequential, indirect, special, or punitive       */
/* damages of any kind, or for loss of revenue or profits, loss of */
/* business, loss of information or data, or other financial loss  */
/* arising out of or in connection with this software, even if     */
/* Acroname Inc. has been advised of the possibility of such       */
/* damages.                                                        */
/*                                                                 */
/* Acroname Inc.                                                   */
/* www.acroname.com                                                */
/* 720-564-0373                                                    */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#ifndef _aServo_T_
#define _aServo_T_

#include <aIOPorts.tea>


/* defines for setting servo configuration */
/* these may be ORed together to configure a servo pin */

#define	SRV_DSTA	32
#define	SRV_INV		64
#define	SRV_ENA		128



char aServo_Count()
{
  char num=0;

  asm {
    pushmb	aPortNServo
    popbs	1
  }

  return num;

} /* aServo_Count */



void aServo_SetConfig(char servo, unsigned char config)
{
  asm {
    // push the new config value onto the stack
    pushsb	3
    // compute the offset to the servo port
    pushls	aPortServo + aOffsetServoConfig
    pushlb	aPortServoBlockSize
    pushsb	8
    multb
    adds
    // pop the config into the computed port
    popbmx
  }

} /* aServo_SetConfig */

unsigned char aServo_GetConfig(char servo)
{
  unsigned char config=0;

  asm {
    // compute the offset to the servo port
    pushls	aPortServo + aOffsetServoConfig
    pushlb	aPortServoBlockSize
    pushsb	7
    multb
    adds
    // push the config byte onto the stack
    pushmbx
    // pop it into the return value 
    popbs	1
  }
  
  return config;

} /* aServo_GetConfig */



void aServo_SetLimits(char servo, int limits)
{
  asm {
    // push the new limits value onto the stack
    pushss	4
    // compute the offset to the servo port
    pushls	aPortServo + aOffsetServoLimits
    pushlb	aPortServoBlockSize
    pushsb	10
    multb
    adds
    // pop the limits into the computed port
    popsmx
  }

} /* aServo_SetLimits */

int aServo_GetLimits(char servo)
{
  int limits=0;

  asm {
    // compute the offset to the servo port
    pushls	aPortServo + aOffsetServoLimits
    pushlb	aPortServoBlockSize
    pushsb	8
    multb
    adds
    // push the limits onto the stack
    pushmsx
    // pop them into the return value 
    popss	2
  }
  
  return limits;

} /* aServo_GetLimits */


 
void aServo_SetAbsolute(char servo, unsigned char position)
{
  asm {
    // push the new position onto the stack
    pushsb	3
    // compute the offset to the servo port
    pushls	aPortServo + aOffsetServoAbsolute
    pushlb	aPortServoBlockSize
    pushsb	8
    multb
    adds
    // pop the position into the computed port
    popbmx
  }

} /* aServo_SetAbsolute */

unsigned char aServo_GetAbsolute(char servo)
{
  unsigned char position=0;

  asm {
    // compute the offset to the servo port
    pushls	aPortServo + aOffsetServoAbsolute
    pushlb	aPortServoBlockSize
    pushsb	7
    multb
    adds
    // push the position onto the stack
    pushmbx
    // pop it into the return value 
    popbs	1
  }
  
  return position;

} /* aServo_GetAbsolute */



void aServo_Relative(char servo, char offset)
{
  asm {
    // push the offset onto the stack
    pushsb	3
    // compute the offset to the servo port
    pushls	aPortServo + aOffsetServoRelative
    pushlb	aPortServoBlockSize
    pushsb	8
    multb
    adds
    // pop the offset into the computed port
    popbmx
  }

} /* aServo_Relative */



void aServo_SetReflex(char servo, unsigned int reflex)
{
  asm {
    // push the new reflex params onto the stack
    pushss	4
    // compute the offset to the servo port
    pushls	aPortServo + aOffsetServoReflex
    pushlb	aPortServoBlockSize
    pushsb	10
    multb
    adds
    // pop the reflex params into the computed port
    popsmx
  }

} /* aServo_SetReflex */

unsigned int aServo_GetReflex(char servo)
{
  unsigned int reflex=0;

  asm {
    // compute the offset to the servo port
    pushls	aPortServo + aOffsetServoReflex
    pushlb	aPortServoBlockSize
    pushsb	8
    multb
    adds
    // push the reflex params onto the stack
    pushmsx
    // pop them into the return value 
    popss	2
  }
  
  return reflex;

} /* aServo_GetLimits */



void aServo_Stop(char servo)
{
  asm {
    // push dummy byte onto the stack
    pushlb	0
    // compute the offset to the servo port
    pushls	aPortServo + aOffsetServoStop
    pushlb	aPortServoBlockSize
    pushsb	7
    multb
    adds
    // pop the dummy byte into the computed port
    popbmx
  }

} /* aServo_Stop */



void aServo_Write(char index, char data)
{
  asm {
    pushsb	3	/* push data */
    brz		ZERO	/* zero data is okay */
    popb
    pushlb	0x20	/* else convert 1 to 0x20 */
ZERO:    
    pushsb	5	/* push index */
    pushlb	3	/* index*8 (index << 3) */
    rlb			/* (servo block size is 8) */
    convbs			/* index*8 to short */
    pushls	aPortServo +	/* add servo port IO base */
    		aOffsetServoConfig
    adds
    popbmx    /* pop data byte into computed port address */
  }

} /* aServo_Write */



#endif /* _aServo_T_ */
