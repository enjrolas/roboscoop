/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* file: aDig.tea                                                  */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* description: Routines for digital IO functions                  */
/*              for all BrainStem Modules.                         */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/*        docs: Documentation can be found in the BrainStem        */
/*              Reference under the major topic "TEA"              */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* Copyright 1994-2008. Acroname Inc.                              */
/*                                                                 */
/* This software is the property of Acroname Inc.  Any             */
/* distribution, sale, transmission, or re-use of this code is     */
/* strictly forbidden except with permission from Acroname Inc.    */
/*                                                                 */
/* To the full extent allowed by law, Acroname Inc. also excludes  */
/* for itself and its suppliers any liability, wheither based in   */
/* contract or tort (including negligence), for direct,            */
/* incidental, consequential, indirect, special, or punitive       */
/* damages of any kind, or for loss of revenue or profits, loss of */
/* business, loss of information or data, or other financial loss  */
/* arising out of or in connection with this software, even if     */
/* Acroname Inc. has been advised of the possibility of such       */
/* damages.                                                        */
/*                                                                 */
/* Acroname Inc.                                                   */
/* www.acroname.com                                                */
/* 720-564-0373                                                    */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#ifndef _aDig_T_
#define _aDig_T_

#include <aIOPorts.tea>


/* defines for setting digital configuration */
/* these may be ORed together to configure a digital IO pin */

#define	ADIG_OUTPUT	0
#define	ADIG_INPUT	1
#define	ADIG_POLLENA	2
#define	ADIG_POLLHI	4
#define	ADIG_TMRHI	8
#define	ADIG_TMRWID	16



/*-----------------------------------------*/
/* PARAMETERIZED DIGITAL IO CONFIG ROUTINE */
/*-----------------------------------------*/

void aDig_Config(char index, char flags)
{
  asm {
    pushsb	3	/* push flags */
    pushsb	5	/* push index */
    pushlb	2	/* index*4 (index << 2) */
    rlb			/* (digital block size is 4) */
    convbs			/* index*4 to short */
    pushls	aPortDigital    /* add digital port CFG base */
    adds
    popbmx    /* pop flag byte into computed port address */
  }
}



/*--------------------------*/
/* DIGITAL IO READ ROUTINES */
/*--------------------------*/

int aDig_ReadInt(char index)
{
  int val=0;
  asm {
    pushsb	5	/* push index */
    pushlb	2	/* index*4 (index << 2) */
    rlb			/* (digital block size is 4) */
    convbs			/* index*4 to short */
    pushls	aPortDigital +	/* add digital port IO base */
    		aOffsetDigitalIO
    adds
    pushmsx		/* push val from computed port address */
    popss	2	/* pop reading into val */
  }
  return val;
}

char aDig_ReadChar(char index)
{
  char val=0;
  asm {
    pushsb	4	/* push index */
    pushlb	2	/* index*4 (index << 2) */
    rlb			/* (digital block size is 4) */
    convbs			/* index*4 to short */
    pushls	aPortDigital +	/* add digital port IO base */
    		aOffsetDigitalIO
    adds
    pushmbx		/* push val from computed port address */
    popbs	1	/* pop reading into val */
  }
  return val;
}

int aDig_ReadAllInt()
{
  int value=0;
  asm
  {
    /* read all digital inputs */
    pushms	aPortDigital+aPortDigitalBlockSize*0+aOffsetDigitalIO
    pushms	aPortDigital+aPortDigitalBlockSize*1+aOffsetDigitalIO
    pushms	aPortDigital+aPortDigitalBlockSize*2+aOffsetDigitalIO
    pushms	aPortDigital+aPortDigitalBlockSize*3+aOffsetDigitalIO
    pushms	aPortDigital+aPortDigitalBlockSize*4+aOffsetDigitalIO
    /* perform shifts and ORs to combine them into one byte */
    pushlb	1
    rls
    ors
    pushlb	1
    rls
    ors
    pushlb	1
    rls
    ors
    pushlb	1
    rls
    ors
    popss	2
  }
  return value;
}



/*----------------------------------------*/
/* PARAMETERIZED DIGITAL TMR READ ROUTINE */
/*----------------------------------------*/

int aDig_ReadTmr(char index)
{
  int val=0;

  asm {
    pushsb	5	/* push index */
    pushlb	2	/* index*4 (index << 2) */
    rlb			/* (digital block size is 4) */
    convbs			/* index*4 to short */
    pushls	aPortDigital +	/* add digital port Tmr base */
    		aOffsetDigitalPTime
    adds
    pushmsx		/* push val from computed port address */
    popss	2	/* pop reading into val */
  }

  return val;
}



/*----------------------------------------*/
/* PARAMETERIZED DIGITAL IO WRITE ROUTINE */
/*----------------------------------------*/

void aDig_Write(char index, char data)
{
  asm {
    pushsb	3	/* push data */
    pushsb	5	/* push index */
    pushlb	2	/* index*4 (index << 2) */
    rlb			/* (digital block size is 4) */
    convbs			/* index*4 to short */
    pushls	aPortDigital +	/* add digital port IO base */
    		aOffsetDigitalIO
    adds
    popbmx    /* pop data byte into computed port address */
  }
}

#endif /* _aDig_T_ */
